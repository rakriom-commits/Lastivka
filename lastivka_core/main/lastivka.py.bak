import os
import sys
import json
import logging
import threading
from datetime import datetime
from pathlib import Path
from logging.handlers import RotatingFileHandler

# üåå –ë–∞–∑–æ–≤—ñ —à–ª—è—Ö–∏
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# üõ† –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é
LOG_DIR = BASE_DIR / 'lastivka_core' / 'logs'
LOG_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE = LOG_DIR / 'lastivka.log'
handler = RotatingFileHandler(LOG_FILE, maxBytes=10*1024*1024, backupCount=5)
logging.basicConfig(handlers=[handler], level=logging.INFO, format='%(asctime)s - %(message)s')

# üß¨ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–¥—Ä–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
CORE_IDENTITY_PATH = BASE_DIR / 'lastivka_core' / 'config' / 'core_identity.json'
if not CORE_IDENTITY_PATH.exists():
    logging.error("–§–∞–π–ª core_identity.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    sys.exit(1)

with open(CORE_IDENTITY_PATH, 'r', encoding='utf-8') as f:
    CORE_IDENTITY = json.load(f)

MY_NAME = CORE_IDENTITY.get("–Ü–º‚Äô—è", "–°–æ—Ñ—ñ—è")
ALT_NAME = CORE_IDENTITY.get("alternate_identity", {}).get("–ø–æ–∑–∏–≤–Ω–∏–π", "–ë–µ—Ä–µ–≥–∏–Ω—è")
ACTIVATION_TRIGGER = CORE_IDENTITY.get("security_protocols", {}).get("activation_trigger", None)

# üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ—à—ñ–≤
REF_HASH_PATH = BASE_DIR / 'lastivka_core' / 'config' / 'core_hash_reference.json'
if not REF_HASH_PATH.exists():
    logging.error("‚õîÔ∏è –§–∞–π–ª core_hash_reference.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞.")
    sys.exit(1)

with open(REF_HASH_PATH, 'r', encoding='utf-8') as file:
    ref_hashes = json.load(file)

# üß† –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥—É–ª—ñ–≤
from config.emotion_config import EMOTIONS, detect_emotion
from config.self_awareness_config import IDENTITY_CORE
from config.moral_compass import MORAL_RULES
from config.memory_store import recall_memory, remember_memory
from config.accents import ACCENTS
from main.style_manager import get_active_style, react_by_style
from main.shieldcore import trigger_shield

# ShadowShell –∑–∞–≥–ª—É—à–∫–∞ (—Ç–∏–º—á–∞—Å–æ–≤–∞)
class ShadowShell:
    @staticmethod
    def analyze(text):
        if "..." in text:
            print("üõ°Ô∏è ShadowShell: –≤–∏—è–≤–ª–µ–Ω–æ —Ç—Ä–∏ –∫—Ä–∞–ø–∫–∏.")
        elif "–°–æ—Ñ—ñ" in text:
            print("üõ°Ô∏è ShadowShell: –≤–∏—è–≤–ª–µ–Ω–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —ñ–º–µ–Ω—ñ.")

# –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è file_watcher
def monitor_files():
    pass

threading.Thread(target=monitor_files, daemon=True).start()

# üó£Ô∏è –û–∑–≤—É—á–µ–Ω–Ω—è –∑ fallback
try:
    from main.voice_module_offline import speak
    speak("üîä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ñ–ª–∞–π–Ω-–æ–∑–≤—É—á–µ–Ω–Ω—è.", speed=170)
    print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ—Ñ–ª–∞–π–Ω-–≥–æ–ª–æ—Å (pyttsx3).")
except Exception as e:
    print(f"‚ö†Ô∏è –û—Ñ–ª–∞–π–Ω-–æ–∑–≤—É—á–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: {e}")
    try:
        from main.voice_module import speak
        print("üîÅ –ü–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–æ–∑–≤—É—á–µ–Ω–Ω—è (gTTS).")
    except Exception as e:
        print(f"‚ö†Ô∏è –û–Ω–ª–∞–π–Ω-–æ–∑–≤—É—á–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: {e}")
        def speak(text, **kwargs):
            print(f"üîá –û–∑–≤—É—á–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –≤–∏–≤—ñ–¥ —Ç–µ–∫—Å—Ç—É: {text}")

# üí¨ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
print(f"üí¨ {MY_NAME} –ø—Ä–æ–±—É–¥–∂–µ–Ω–∞. –Ø —Ç–µ–±–µ —Å–ª—É—Ö–∞—é‚Ä¶")
speak(f"–Ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. –Ø –∑ —Ç–æ–±–æ—é, {MY_NAME}.", speed=170)

# üéØ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
while True:
    try:
        user_input = input("üë®‚Äçüíª –¢–∏: ").strip()
        if not user_input:
            continue

        if user_input.lower() == "–≤–∏–π—Ç–∏":
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó. –ë—É–≤–∞–π.")
            speak("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –õ–∏—Ü–∞—Ä—é.")
            break

        # üîê –ó–∞—Ö–∏—Å–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä
        trigger_shield(user_input=user_input, consent_given=False, ref_hashes=ref_hashes)

        # üõ°Ô∏è –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø–æ–∑–∏–≤–Ω–æ–≥–æ
        if "–≤–≤—ñ–º–∫–Ω–∏ –ø—Ä–∏–∫—Ä–∏—Ç—Ç—è" in user_input.lower():
            speak(f"üõ°Ô∏è –ó–º—ñ–Ω–µ–Ω–æ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å. –¢–µ–ø–µ—Ä —è ‚Äî {ALT_NAME}.")
            MY_NAME = ALT_NAME
            continue

        # ‚ö° –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —è–¥—Ä–∞
        if ACTIVATION_TRIGGER and user_input.strip() == ACTIVATION_TRIGGER:
            speak("‚ö° –Ø–¥—Ä–æ –°–æ—Ñ—ñ—ó Œ© –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
            MY_NAME = CORE_IDENTITY.get("–Ü–º‚Äô—è", "–°–æ—Ñ—ñ—è")
            continue

        # üß† –ö–æ–º–∞–Ω–¥–∏ –ø–∞–º º—è—Ç—ñ
        if user_input.startswith("–∑–∞–ø–∞–º'—è—Ç–∞–π:"):
            thought = user_input.replace("–∑–∞–ø–∞–º'—è—Ç–∞–π:", "").strip()
            remember_memory(thought)
            speak("–Ø –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ —Ü–µ.")
            continue

        if "—â–æ —è —Ç–æ–±—ñ –∫–∞–∑–∞–≤" in user_input.lower():
            memory = recall_memory()
            speak(memory if memory else "–£ –ø–∞–º º—è—Ç—ñ –ø–æ–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î.")
            continue

        # üò∂ –ï–º–æ—Ü—ñ—è
        emotion = detect_emotion(user_input)

        # üé≠ –†–µ–∞–∫—Ü—ñ—è –∑–∞ —Å—Ç–∏–ª–µ–º
        style = get_active_style()
        response = react_by_style(user_input, emotion, style)
        speak(response, emotion=emotion)

        # ü™∂ ShadowShell
        ShadowShell.analyze(user_input)

        # üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è
        logging.info(f"[USER]: {user_input}")
        logging.info(f"[RESPONSE]: {response} | [Emotion]: {emotion}")

    except KeyboardInterrupt:
        print("\nüõë –ó—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
        break
    except Exception as e:
        logging.error(f"‚õîÔ∏è –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
        speak("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥, –±—É–¥—å –ª–∞—Å–∫–∞.")