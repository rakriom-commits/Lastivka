import json
import os
import time
from pathlib import Path
from tempfile import NamedTemporaryFile
from datetime import datetime

# ===üìÅ –®–ª—è—Ö–∏ ===
BASE_DIR = Path(__file__).resolve().parent.parent
PRON_ERROR_LOG = BASE_DIR / "logs" / "pronunciation_errors.json"

# ===üîä –û–∑–≤—É—á–µ–Ω–Ω—è ===
LANG = "uk"

# pygame –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º—ñ–∫—à–µ—Ä –º‚Äô—è–∫–æ
try:
    import pygame
    _PYGAME_IMPORTED = True
except Exception:
    _PYGAME_IMPORTED = False

def _ensure_mixer() -> bool:
    """–õ–µ–¥–∞—á–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ pygame.mixer."""
    if not _PYGAME_IMPORTED:
        return False
    try:
        if not pygame.mixer.get_init():
            pygame.mixer.init()
        return True
    except Exception:
        return False

# gTTS —Ç–∞–∫–æ–∂ –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—î—Ç—å—Å—è
try:
    from gtts import gTTS
    _GTTS_IMPORTED = True
except Exception:
    _GTTS_IMPORTED = False


def tts_available() -> bool:
    """–ß–∏ –¥–æ—Å—Ç—É–ø–Ω–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–µ TTS (gTTS + pygame.mixer)?"""
    return _GTTS_IMPORTED and _ensure_mixer()


def _play_mp3(path: str) -> None:
    """–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è MP3 —á–µ—Ä–µ–∑ pygame.mixer –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –∫—ñ–Ω—Ü—è."""
    if not _ensure_mixer():
        return
    # –Ø–∫—â–æ —â–æ—Å—å —É–∂–µ –≥—Ä–∞—î ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ
    try:
        if pygame.mixer.music.get_busy():
            pygame.mixer.music.stop()
    except Exception:
        pass

    pygame.mixer.music.load(path)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        time.sleep(0.1)


def speak(text: str, **kwargs):
    """
    –û–∑–≤—É—á—É—î —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ gTTS + pygame (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ).
    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (**kwargs) —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è (—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —ñ–∑ –≤–∏–∫–ª–∏–∫–∞–º–∏ —Ç–∏–ø—É speed=..., emotion=...).
    –ó–∞–≤–∂–¥–∏ –¥—É–±–ª—é—î —Ç–µ–∫—Å—Ç —É –∫–æ–Ω—Å–æ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ [üîä]: ...
    """
    if not text:
        return

    print(f"[üîä]: {text}")

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥
    if not (_GTTS_IMPORTED and _ensure_mixer()):
        if not _GTTS_IMPORTED:
            print("‚ö†Ô∏è gTTS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: –æ–∑–≤—É—á—É—é –ª–∏—à–µ –≤ –∫–æ–Ω—Å–æ–ª—å.")
        if not _ensure_mixer():
            print("‚ö†Ô∏è pygame.mixer –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: –æ–∑–≤—É—á—É—é –ª–∏—à–µ –≤ –∫–æ–Ω—Å–æ–ª—å.")
        return

    tmp_path = None
    try:
        # 1) –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª (Windows-friendly)
        with NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            tmp_path = fp.name

        # 2) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–∑–≤—É—á–µ–Ω–Ω—è
        tts = gTTS(text=text, lang=LANG)
        tts.save(tmp_path)

        # 3) –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
        _play_mp3(tmp_path)

    except Exception as e:
        print(f"‚ùå speak() error: {e}")
    finally:
        # 4) –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        if tmp_path and os.path.exists(tmp_path):
            try:
                os.remove(tmp_path)
            except Exception:
                pass


def show_pronunciation_errors(limit: int = 10):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏–º–æ–≤–∏ –∑ –ª–æ–≥-—Ñ–∞–π–ª—É.
    :param limit: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (default=10)
    """
    if not PRON_ERROR_LOG.exists():
        print("‚ùå –§–∞–π–ª –ª–æ–≥—ñ–≤ –ø–æ–º–∏–ª–æ–∫ –≤–∏–º–æ–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        with open(PRON_ERROR_LOG, "r", encoding="utf-8") as f:
            errors = json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ JSON. –§–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ?")
        return

    if not errors:
        print("üü¢ –ñ–æ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤–∏–º–æ–≤–∏.")
        return

    print(f"\nüìò –û—Å—Ç–∞–Ω–Ω—ñ {min(len(errors), limit)} –ø–æ–º–∏–ª–∫–∏ –≤–∏–º–æ–≤–∏:\n")
    for err in errors[-limit:]:
        ts = err.get("timestamp", "‚Äî")
        incorrect = err.get("incorrect", "??")
        correct = err.get("correct", "??")
        source = err.get("source_phrase", "")
        time_str = datetime.fromisoformat(ts).strftime("%Y-%m-%d %H:%M:%S") if isinstance(ts, str) and "T" in ts else ts
        print(f"üïí {time_str}")
        print(f"üîª –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ: {incorrect}")
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
        if source:
            print(f"üí¨ –§—Ä–∞–∑–∞: {source}")
        print("-" * 40)
