# tools/file_watcher.py

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent.parent))  # –î–æ–¥–∞—î–º–æ lastivka_core –¥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à–ª—è—Ö—É

import time
import hashlib
import shutil
from datetime import datetime

from tools.speech_utils import speak
from tools.emotion_engine import set_emotion

WATCHED_FILES = [
    Path("config/core_identity.json"),
    Path("config/moral_compass.json"),
    Path("config/emotion_config.json"),
    Path("logs/memory_store.json"),
    Path("main/lastivka.py")
]

HASH_LOG = {}
CHECK_INTERVAL = 15  # —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Å–µ–∫—É–Ω–¥–∞—Ö

def compute_file_hash(file_path):
    try:
        with open(file_path, 'rb') as f:
            return hashlib.sha256(f.read()).hexdigest()
    except Exception:
        return None

def init_hash_log():
    for file in WATCHED_FILES:
        HASH_LOG[file] = compute_file_hash(file)

def backup_file(file):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = file.parent / f"{file.stem}_backup_{timestamp}{file.suffix}"
    try:
        shutil.copy(file, backup_path)
        print(f"[‚úî] –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_path.name}")
    except Exception as e:
        print(f"[‚ùå] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {e}")

def handle_change(file):
    print(f"[‚ö†] –ó–º—ñ–Ω–∞ –≤–∏—è–≤–ª–µ–Ω–∞ —É —Ñ–∞–π–ª—ñ {file.name}. –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é...")
    if file.name == "memory_store.json":
        set_emotion("–ø–æ–¥–∏–≤")
        speak("–£–≤–∞–≥–∞. –ë—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –ø–∞–º º—è—Ç—å. –ß–∏ —Å–ª—ñ–¥ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏?")
    else:
        set_emotion("—Ç—Ä–∏–≤–æ–≥–∞")
        speak(f"–ë—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ —Ñ–∞–π–ª {file.name}. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä —Å–ø—Ä–∞–≤–Ω—ñ—Å—Ç—å.")

def monitor_files(on_change_callback=handle_change):
    init_hash_log()
    print("[üîç] FileWatcher –∑–∞–ø—É—â–µ–Ω–æ. –°—Ç–µ–∂–∏–º–æ –∑–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏...")
    while True:
        for file in WATCHED_FILES:
            new_hash = compute_file_hash(file)
            if not new_hash:
                continue
            if new_hash != HASH_LOG.get(file):
                print(f"[üåÄ] –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω—É —É —Ñ–∞–π–ª—ñ: {file.name}")
                HASH_LOG[file] = new_hash
                backup_file(file)
                on_change_callback(file)
        time.sleep(CHECK_INTERVAL)

# –°–∞–º–æ—Å—Ç—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    monitor_files()
