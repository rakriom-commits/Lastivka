# === LASTIVKA Œ©: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥—ñ–≤ ===

import os
import json
from pathlib import Path
from datetime import datetime

# ‚ñë‚ñë‚ñë –û–°–ù–û–í–ù–Ü –®–õ–Ø–•–ò ‚ñë‚ñë‚ñë
LOG_DIR = Path(__file__).resolve().parent.parent / "logs"
ARCHIVE_DIR = LOG_DIR / "archive"

# üõ†Ô∏è –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ logs/archive/
ARCHIVE_DIR.parent.mkdir(parents=True, exist_ok=True)
ARCHIVE_DIR.mkdir(exist_ok=True)

# ‚ñë‚ñë‚ñë –Ü–ù–î–ò–í–Ü–î–£–ê–õ–¨–ù–Ü –õ–Ü–ú–Ü–¢–ò ‚ñë‚ñë‚ñë
LOG_LIMITS = {
    "language_log.json": 100,
    "pronunciation_errors.json": 100,
    "pronunciation_log.json": 100,
    "rating_log.json": 200,
    "memory_store.json": 500
}

# ‚ñë‚ñë‚ñë –§–£–ù–ö–¶–Ü–á ‚ñë‚ñë‚ñë

def clean_json_log(file_path: Path, max_entries: int):
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª {file_path.name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        if isinstance(data, list) and len(data) > max_entries:
            archived = data[:-max_entries]
            data = data[-max_entries:]

            archive_name = f"{file_path.stem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.bak.json"
            archive_path = ARCHIVE_DIR / archive_name

            with open(archive_path, "w", encoding="utf-8") as archive:
                json.dump(archived, archive, ensure_ascii=False, indent=2)

            print(f"üóÉÔ∏è –ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ {len(archived)} –∑–∞–ø–∏—Å—ñ–≤ —É {archive_path.name}")

        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {file_path.name} (–∑–∞–ª–∏—à–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤)")

    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {file_path.name} –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ –Ω–µ —î JSON.")


def delete_or_archive_file(filename: str, delete: bool = True):
    file_path = LOG_DIR / filename
    if not file_path.exists():
        return

    # üõ°Ô∏è –ó–∞–±–æ—Ä–æ–Ω–∞ –Ω–∞ –æ–±—Ä–æ–±–∫—É —Å–ø–∞–¥–∫–æ–≤–∏—Ö –∞–±–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ª–æ–≥—ñ–≤
    if "aurelia" in filename.lower():
        print(f"‚õî –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ñ–∞–π–ª {filename} ‚Äî –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –ø–æ–ª—ñ—Ç–∏–∫–æ—é —Å—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—ñ.")
        return

    if delete:
        file_path.unlink()
        print(f"üî• –í–∏–¥–∞–ª–µ–Ω–æ {filename}")
    else:
        archive_path = ARCHIVE_DIR / (filename + ".bak")
        file_path.rename(archive_path)
        print(f"üì¶ –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ {filename} –≤ –∞—Ä—Ö—ñ–≤")


# ‚ñë‚ñë‚ñë –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ‚ñë‚ñë‚ñë
def process_logs():
    for log, limit in LOG_LIMITS.items():
        clean_json_log(LOG_DIR / log, limit)


if __name__ == "__main__":
    process_logs()
