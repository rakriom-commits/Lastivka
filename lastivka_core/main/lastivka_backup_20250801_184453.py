import os
import sys
import json
import logging
import threading
from datetime import datetime
from pathlib import Path
from logging.handlers import RotatingFileHandler

# üåå –ë–∞–∑–æ–≤—ñ —à–ª—è—Ö–∏
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# üõ† –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE = LOG_DIR / 'lastivka.log'
handler = RotatingFileHandler(LOG_FILE, maxBytes=10*1024*1024, backupCount=5)
logging.basicConfig(handlers=[handler], level=logging.INFO, format='%(asctime)s - %(message)s')

# üß¨ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–¥—Ä–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
CORE_IDENTITY_PATH = BASE_DIR / 'config' / 'core_identity.json'
if not CORE_IDENTITY_PATH.exists():
    input("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ core_identity.json. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
    sys.exit(1)
with open(CORE_IDENTITY_PATH, 'r', encoding='utf-8') as f:
    CORE_IDENTITY = json.load(f)
MY_NAME = CORE_IDENTITY.get("–Ü–º'—è", "–°–æ—Ñ—ñ—è")
ALT_NAME = CORE_IDENTITY.get("alternate_identity", {}).get("–ø–æ–∑–∏–≤–Ω–∏–π", "–ë–µ—Ä–µ–≥–∏–Ω—è")
ACTIVATION_TRIGGER = CORE_IDENTITY.get("security_protocols", {}).get("activation_trigger", None)

# üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ—à—ñ–≤
REF_HASH_PATH = BASE_DIR / 'config' / 'core_hash_reference.json'
if not REF_HASH_PATH.exists():
    input("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ core_hash_reference.json. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
    sys.exit(1)
with open(REF_HASH_PATH, 'r', encoding='utf-8') as file:
    ref_hashes = json.load(file)

# üß† –Ü–ú–ü–û–†–¢–ò –û–°–ù–û–í–ù–ò–• –ú–û–î–£–õ–Ü–í
from config.memory_store import recall_memory, log_thought as remember_memory, check_triggers, purge_old_thoughts
from main.style_manager import get_active_style, react_by_style
from main.shieldcore import trigger_shield
from tools.emotion_engine import EmotionEngine

# üéô –ê–∫—Ü–µ–Ω—Ç–∏: —á–∏—Ç–∞—î–º–æ –∑ JSON (–±–æ accents.py –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)
ACCENTS_PATH = BASE_DIR / 'config' / 'accents.json'
try:
    if ACCENTS_PATH.exists():
        with open(ACCENTS_PATH, 'r', encoding='utf-8') as f:
            ACCENTS = json.load(f)
    else:
        ACCENTS = {}
except Exception:
    ACCENTS = {}

# üîé –õ–ï–ì–ö–ò–ô –§–û–ù–û–í–ò–ô –°–¢–ê–†–¢ –ù–ê–ì–õ–Ø–î–ê–ß–ê (–±–µ–∑ —Ä–æ–∑–¥—É—Ç—Ç—è lastivka.py)
try:
    from config.watcher_boot import start as start_watcher
    start_watcher()  # –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
except Exception as _e:
    logging.warning(f"‚ö†Ô∏è Watcher –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ: {_e}")

# üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —è–¥—Ä–∞
emotion_engine = EmotionEngine(BASE_DIR / 'config' / 'emotion_config.json')

# ‚õìÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è self_awareness_config.json
SELF_AWARENESS_PATH = BASE_DIR / 'config' / 'self_awareness_config.json'
if not SELF_AWARENESS_PATH.exists():
    input("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ self_awareness_config.json. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
    sys.exit(1)
with open(SELF_AWARENESS_PATH, 'r', encoding='utf-8') as f:
    IDENTITY_CORE = json.load(f)

# üìú –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è moral_compass.json
MORAL_COMPASS_PATH = BASE_DIR / 'config' / 'moral_compass.json'
if not MORAL_COMPASS_PATH.exists():
    input("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ moral_compass.json. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
    sys.exit(1)
with open(MORAL_COMPASS_PATH, 'r', encoding='utf-8') as f:
    MORAL_RULES = json.load(f)

# üó£Ô∏è –û–∑–≤—É—á–µ–Ω–Ω—è –∑ fallback
try:
    from main.voice_module_offline import speak
    speak("üîä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ñ–ª–∞–π–Ω-–æ–∑–≤—É—á–µ–Ω–Ω—è.", speed=170)
except Exception:
    try:
        from main.voice_module import speak
    except Exception:
        def speak(text, **kwargs):
            print(f"üîá –û–∑–≤—É—á–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –≤–∏–≤—ñ–¥ —Ç–µ–∫—Å—Ç—É: {text}")

# üí¨ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
print(f"üí¨ {MY_NAME} –ø—Ä–æ–±—É–¥–∂–µ–Ω–∞. –Ø —Ç–µ–±–µ —Å–ª—É—Ö–∞—é‚Ä¶")
speak(f"–Ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. –Ø –∑ —Ç–æ–±–æ—é, {MY_NAME}.", speed=170)

# üéØ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
while True:
    try:
        user_input = input("üë®‚Äçüíª –¢–∏: ").strip()
        if not user_input:
            continue

        if user_input.lower() == "–≤–∏–π—Ç–∏":
            speak("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –õ–∏—Ü–∞—Ä—é.")
            break

        trigger_shield(user_input=user_input, consent_given=False, ref_hashes=ref_hashes)

        if "–≤–≤—ñ–º–∫–Ω–∏ –ø—Ä–∏–∫—Ä–∏—Ç—Ç—è" in user_input.lower():
            speak(f"üõ°Ô∏è –ó–º—ñ–Ω–µ–Ω–æ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å. –¢–µ–ø–µ—Ä —è ‚Äî {ALT_NAME}.")
            MY_NAME = ALT_NAME
            continue

        if ACTIVATION_TRIGGER and user_input.strip() == ACTIVATION_TRIGGER:
            speak("‚ö°Ô∏è –Ø–¥—Ä–æ –°–æ—Ñ—ñ—ó Œ© –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
            MY_NAME = CORE_IDENTITY.get("–Ü–º'—è", "–°–æ—Ñ—ñ—è")
            continue

        if user_input.startswith("–∑–∞–ø–∞–º'—è—Ç–∞–π:"):
            thought = user_input.replace("–∑–∞–ø–∞–º'—è—Ç–∞–π:", "").strip()
            remember_memory(thought)
            speak("–Ø –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ —Ü–µ.")
            continue

        if "—â–æ —è —Ç–æ–±—ñ –∫–∞–∑–∞–≤" in user_input.lower():
            memory = recall_memory()
            speak(memory if memory else "–£ –ø–∞–º º—è—Ç—ñ –ø–æ–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î.")
            continue

        trigger_response = check_triggers(user_input)
        if trigger_response:
            speak(trigger_response)

        emotion = emotion_engine.detect_emotion(user_input)
        style = get_active_style()
        response = react_by_style(user_input, emotion, style, accents=ACCENTS if ACCENTS else None)
        speak(response, emotion=emotion)

        logging.info(f"[USER]: {user_input}")
        logging.info(f"[RESPONSE]: {response} | [Emotion]: {emotion}")

    except KeyboardInterrupt:
        break
    except Exception as e:
        logging.error(f"‚õîÔ∏è –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
        speak("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥, –±—É–¥—å –ª–∞—Å–∫–∞.")
