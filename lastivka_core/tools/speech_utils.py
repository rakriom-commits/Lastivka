import json
import os
import time
from pathlib import Path
from tempfile import NamedTemporaryFile
from datetime import datetime

# üìÅ –ë–∞–∑–æ–≤–∏–π –∫–∞—Ç–∞–ª–æ–≥ —ñ —à–ª—è—Ö –¥–æ –ª–æ–≥—ñ–≤ –ø–æ–º–∏–ª–æ–∫ –≤–∏–º–æ–≤–∏
BASE_DIR = Path(__file__).resolve().parent.parent
PRON_ERROR_LOG = BASE_DIR / "logs" / "pronunciation_errors.json"

# üåê –ú–æ–≤–∞ –æ–∑–≤—É—á–µ–Ω–Ω—è
LANG = "uk"

# üéµ –Ü–º–ø–æ—Ä—Ç pygame –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É
try:
    import pygame
    _PYGAME_IMPORTED = True
except Exception:
    _PYGAME_IMPORTED = False

def _ensure_mixer() -> bool:
    if not _PYGAME_IMPORTED:
        return False
    try:
        if not pygame.mixer.get_init():
            pygame.mixer.init()
        return True
    except Exception:
        return False

# üì¢ gTTS
try:
    from gtts import gTTS
    _GTTS_IMPORTED = True
except Exception:
    _GTTS_IMPORTED = False

def tts_available() -> bool:
    return _GTTS_IMPORTED and _ensure_mixer()

def _play_mp3(path: str) -> None:
    if not _ensure_mixer():
        return
    try:
        if pygame.mixer.music.get_busy():
            pygame.mixer.music.stop()
    except Exception:
        pass
    pygame.mixer.music.load(path)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        time.sleep(0.1)

# === –Ü–ú–ü–û–†–¢ –°–¢–ò–õ–Æ –¢–ê –ï–ú–û–¶–Ü–ô ===
from tools.emotion_engine import get_emotion
from main import style_manager as sm

def speak(text: str, **kwargs):
    """
    –û–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å—Ç–∏–ª—é —ñ –µ–º–æ—Ü—ñ—ó.
    –ü—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ gTTS + pygame (–∞–±–æ –ª–∏—à–µ –¥—Ä—É–∫, —è–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ).
    """

    if not text:
        return

    # üîÅ –ê–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü—ñ—è —Å—Ç–∏–ª—é –¥–æ –µ–º–æ—Ü—ñ—ó
    sm.auto_adjust_style_from_emotion()

    # üß† –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∏–ª—é
    styled_text, tone, speed, pause = sm.react_by_style(text)
    emotion_data = get_emotion()
    intensity = emotion_data.get("intensity", "medium")

    print(f"[TTS | {tone} | {speed} wpm | {intensity}] ‚Üí {styled_text}")

    if not tts_available():
        print("‚ö†Ô∏è gTTS –∞–±–æ pygame –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –û–∑–≤—É—á–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—å.")
        return

    tmp_path = None
    try:
        with NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            tmp_path = fp.name

        tts = gTTS(text=styled_text, lang=LANG)
        tts.save(tmp_path)
        _play_mp3(tmp_path)
        time.sleep(pause)

    except Exception as e:
        print(f"‚ùå speak() error: {e}")
    finally:
        if tmp_path and os.path.exists(tmp_path):
            try:
                os.remove(tmp_path)
            except Exception:
                pass

def show_pronunciation_errors(limit: int = 10):
    if not PRON_ERROR_LOG.exists():
        print("‚ö†Ô∏è –§–∞–π–ª –∂—É—Ä–Ω–∞–ª—É –ø–æ–º–∏–ª–æ–∫ –≤–∏–º–æ–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        with open(PRON_ERROR_LOG, "r", encoding="utf-8") as f:
            errors = json.load(f)
    except json.JSONDecodeError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ JSON. –§–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ?")
        return

    if not errors:
        print("‚ÑπÔ∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–º–æ–≤–∏.")
        return

    print(f"\nüìä –ü–æ–∫–∞–∑—É—é –æ—Å—Ç–∞–Ω–Ω—ñ {min(len(errors), limit)} –ø–æ–º–∏–ª–æ–∫ –≤–∏–º–æ–≤–∏:\n")
    for err in errors[-limit:]:
        ts = err.get("timestamp", "???")
        incorrect = err.get("incorrect", "??")
        correct = err.get("correct", "??")
        source = err.get("source_phrase", "")
        time_str = datetime.fromisoformat(ts).strftime("%Y-%m-%d %H:%M:%S") if isinstance(ts, str) and "T" in ts else ts
        print(f"üïí {time_str}")
        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {incorrect}")
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
        if source:
            print(f"üîπ –î–∂–µ—Ä–µ–ª–æ: {source}")
        print("-" * 40)
