# lastivka_core/tools/short_memory.py

import json
from datetime import datetime
import os

# üìç –¢–µ–ø–µ—Ä –ø–∞–º º—è—Ç—å –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –æ–∫—Ä–µ–º–æ–º—É —Ñ–∞–π–ª—ñ
DEFAULT_MEMORY_FILE = os.path.join("lastivka_core", "config", "short_memory.json")

def load_memory(path: str = DEFAULT_MEMORY_FILE):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—é –±—É—Ñ–µ—Ä–Ω—É –ø–∞–º º—è—Ç—å –∑ —Ñ–∞–π–ª—É"""
    if not os.path.exists(path):
        return {"thoughts": []}
    with open(path, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {"thoughts": []}

def remember_thought(thought: str, path: str = DEFAULT_MEMORY_FILE):
    """–ó–∞–ø–∞–º º—è—Ç–∞—Ç–∏ –Ω–æ–≤—É –¥—É–º–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é"""
    data = load_memory(path)
    if "thoughts" not in data:
        data["thoughts"] = []
    data["thoughts"].append({
        "ts": datetime.now().isoformat(),
        "text": thought
    })
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def recall_thought(path: str = DEFAULT_MEMORY_FILE):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω—É –¥—É–º–∫—É —è–∫ —Ç–µ–∫—Å—Ç, –∞–±–æ None"""
    data = load_memory(path)
    thoughts = data.get("thoughts", [])
    if not thoughts:
        return None
    return thoughts[-1]["text"]

def search_memory(keyword: str, path: str = DEFAULT_MEMORY_FILE):
    """–ü–æ—à—É–∫ –¥—É–º–æ–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"""
    data = load_memory(path)
    return [entry for entry in data.get("thoughts", []) if keyword.lower() in entry["text"].lower()]

def clear_short_memory(path: str = DEFAULT_MEMORY_FILE):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é –±—É—Ñ–µ—Ä–Ω—É –ø–∞–º º—è—Ç—å"""
    with open(path, "w", encoding="utf-8") as f:
        json.dump({"thoughts": []}, f, ensure_ascii=False, indent=2)

__all__ = ["remember_thought", "recall_thought", "load_memory", "search_memory", "clear_short_memory"]
