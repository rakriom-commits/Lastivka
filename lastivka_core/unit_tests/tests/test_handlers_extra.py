import unittest
from pathlib import Path
from types import SimpleNamespace
from io import StringIO
import sys, tempfile

from main.handlers import COMMANDS

class DummySay:
    def __init__(self):
        self.messages = []
    def __call__(self, text, **kwargs):
        self.messages.append(str(text))

class HandlersExtraTests(unittest.TestCase):
    def setUp(self):
        self.CFG = SimpleNamespace(mute=False, name="–°–æ—Ñ—ñ—è", alt_name="–ë–µ—Ä–µ–≥–∏–Ω—è")
        self.say = DummySay()
        # —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ª–æ–≥—É
        self.tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".log", mode="w", encoding="utf-8")
        self.tmp.write("line A\nline B\nline C\n")
        self.tmp.close()
        self.LOG_FILE = Path(self.tmp.name)
        self.CONFIG_DIR = Path("C:/Lastivka/lastivka_core/config")

    def tearDown(self):
        try:
            Path(self.tmp.name).unlink(missing_ok=True)
        except Exception:
            pass

    def test_log_command_prints_tail(self):
        # –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ stdout
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        try:
            COMMANDS["–ª–æ–≥"](self.CFG, self.say, self.LOG_FILE, self.CONFIG_DIR)
            out = sys.stdout.getvalue()
        finally:
            sys.stdout = old_stdout
        # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ say –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–≤—ñ–¥ –º—ñ—Å—Ç–∏—Ç—å –ª—ñ–Ω—ñ—ó –∑ —Ñ–∞–π–ª—É
        self.assertTrue(any("–ü–æ–∫–∞–∑—É—é –æ—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤ –ª–æ–≥—É" in m for m in self.say.messages))
        self.assertIn("line A", out)
        self.assertIn("line B", out)
        self.assertIn("line C", out)

    def test_status_command_prints_summary(self):
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        try:
            COMMANDS["—Å—Ç–∞–Ω"](self.CFG, self.say, self.LOG_FILE, self.CONFIG_DIR)
            out = sys.stdout.getvalue()
        finally:
            sys.stdout = old_stdout
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è
        self.assertTrue(any(m == "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏." for m in self.say.messages))
        self.assertIn("üë§ –Ü–º'—è: –°–æ—Ñ—ñ—è", out)
        self.assertIn("üîà –ó–≤—É–∫:", out)
        self.assertIn("üó£Ô∏è TTS backend:", out)
        self.assertIn("üóÇÔ∏è –õ–æ–≥:", out)

if __name__ == "__main__":
    unittest.main()
