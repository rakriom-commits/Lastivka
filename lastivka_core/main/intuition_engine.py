import difflib
from main.memory_store import list_memories
from config.emotion_config import EMOTIONS
from config.behavioral_styles import STYLES


def normalize_text(text):
    return str(text).lower().strip().replace("‚Äô", "'").replace("  ", " ")

def vector_guessing(prompt):
    """–ê–Ω–∞–ª—ñ–∑ –∑–±—ñ–≥—É –∑ –¥—É–º–∫–∞–º–∏ –∑–∞ —Å–ª–∞–±–∫–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–∞ –≤—ñ–¥–ª—É–Ω–Ω—è–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
    text = normalize_text(prompt)
    memory = list_memories("–¥—É–º–∫–∞")
    matches = []

    for key, entries in memory.items():
        for e in entries:
            value = normalize_text(e.get("value", ""))
            score = difflib.SequenceMatcher(None, text, value).ratio()
            if 0.4 < score <= 0.6:
                matches.append((score, value))

    matches.sort(reverse=True)
    return matches[0][1] if matches else None

def analyze_and_guess(prompt):
    text = normalize_text(prompt)
    memory = list_memories()
    thoughts = memory.get("–¥—É–º–∫–∞", []) if isinstance(memory, dict) else []

    related_thoughts = []
    for t in thoughts:
        value = ""
        if isinstance(t, dict):
            value = str(t.get("value", ""))
        elif isinstance(t, str):
            value = t
        if value and difflib.SequenceMatcher(None, text, value.lower()).ratio() > 0.6:
            related_thoughts.append(value)

    # üß† –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –µ–º–æ—Ü—ñ—ó
    emotion_detected = "—Å–ø–æ–∫—ñ–π"
    for emotion_name, entry in EMOTIONS.get("emotions", {}).items():
        for word in entry.get("triggers", []):
            if word.lower() in text:
                emotion_detected = emotion_name
                break
        if emotion_detected != "—Å–ø–æ–∫—ñ–π":
            break

    # üé≠ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∏–ª—é
    style_detected = "—Å—Ç—Ä–∞—Ç–µ–≥"
    for name, pattern in STYLES.items():
        if pattern.get("–∞–∫—Ç–∏–≤–Ω–∏–π", False):
            style_detected = name
            break

    # üîÆ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è
    if related_thoughts:
        hypothesis = f"–¶–µ —Å—Ö–æ–∂–µ –Ω–∞ –æ–¥–Ω—É –∑ —Ç–≤–æ—ó—Ö –¥—É–º–æ–∫: ¬´{related_thoughts[-1]}¬ª"
    else:
        echo = vector_guessing(text)
        if echo:
            hypothesis = f"–Ñ —Å–ª–∞–±–∫–∞ –ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å –¥–æ –¥—É–º–∫–∏: ¬´{echo}¬ª"
        else:
            hypothesis = "–ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –º–∞—î—à –Ω–∞ —É–≤–∞–∑—ñ —â–æ—Å—å –≥–ª–∏–±—à–µ –∞–±–æ –ø–æ–≤‚Äô—è–∑–∞–Ω–µ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –¥–æ—Å–≤—ñ–¥–æ–º."

    result = {
        "–µ–º–æ—Ü—ñ—è": emotion_detected,
        "—Å—Ç–∏–ª—å": style_detected,
        "–ø—Ä–∏–ø—É—â–µ–Ω–Ω—è": hypothesis,
        "pause": EMOTIONS["emotions"].get(emotion_detected, {}).get("pause", 0.3),
        "tone": EMOTIONS["emotions"].get(emotion_detected, {}).get("tone", "–≥–ª–∞–¥–∫–∏–π"),
        "intensity": EMOTIONS["emotions"].get(emotion_detected, {}).get("intensity", "medium")
    }

    return result

def generate_intuitive_response(prompt):
    result = analyze_and_guess(prompt)
    return {
        "text": result["–ø—Ä–∏–ø—É—â–µ–Ω–Ω—è"],
        "emotion": result["–µ–º–æ—Ü—ñ—è"],
        "tone": result["tone"],
        "intensity": result["intensity"],
        "pause": result["pause"]
    }
