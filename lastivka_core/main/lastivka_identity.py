import json
from pathlib import Path

# === –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ===
BASE_DIR = Path(__file__).resolve().parent.parent
IDENTITY_PATH = BASE_DIR / "config" / "core_identity.json"
MORAL_PATH = BASE_DIR / "config" / "moral_compass.json"

# === –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è ===
_identity_cache = None
_moral_cache = None

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–¥—Ä–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ ===
def load_identity():
    global _identity_cache
    if _identity_cache is None:
        try:
            with open(IDENTITY_PATH, "r", encoding="utf-8") as f:
                _identity_cache = json.load(f)
        except Exception as e:
            print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ core_identity: {e}")
            _identity_cache = {}
    return _identity_cache

# === –í–∏–≤–µ–¥–µ–Ω–Ω—è —è–¥—Ä–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ —É –∫–æ–Ω—Å–æ–ª—å ===
def print_identity(identity):
    print("\n=== –û–°–û–ë–ò–°–¢–Ü–°–ù–ï –Ø–î–†–û –õ–ê–°–¢–Ü–í–ö–ò ===")
    for key, value in identity.items():
        print(f"\nüîπ {key.upper()}:")
        if isinstance(value, list):
            for item in value:
                print(f"  ‚Ä¢ {item}")
        elif isinstance(value, dict):
            for subkey, subval in value.items():
                print(f"  ‚ó¶ {subkey}: {subval}")
        else:
            print(f"  {value}")

# === –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫—Ä–µ–¥–æ (—è–∫—â–æ —î) ===
def print_credo(identity):
    credo = identity.get("credo", "")
    if credo:
        print("\n=== CREDO ===")
        for line in credo.split(". "):
            if line.strip():
                print(f"  ‚Ä¢ {line.strip().rstrip('.')}.")  # –ß–∏—Å—Ç–∏–º–æ –∫—Ä–∞–ø–∫–∏ –≤–∫—ñ–Ω—Ü—ñ

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–∞—Å—É ===
def load_moral_compass():
    global _moral_cache
    if _moral_cache is None:
        try:
            with open(MORAL_PATH, "r", encoding="utf-8") as f:
                _moral_cache = json.load(f)
        except Exception as e:
            print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ moral_compass: {e}")
            _moral_cache = {}
    return _moral_cache

# === –í–∏–≤–µ–¥–µ–Ω–Ω—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–∞—Å—É —É –∫–æ–Ω—Å–æ–ª—å ===
def print_moral_compass(compass):
    print(f"\n=== –ú–û–†–ê–õ–¨–ù–ò–ô –ö–û–ú–ü–ê–°: {compass.get('moral_compass_name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')} ===")

    print("\n--- –ë–∞–∑–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ ---")
    for rule in compass.get("core_rules", []):
        print(f"  ‚Ä¢ {rule}")

    print("\n--- –ü–æ—Ç—Ä–µ–±—É—î –∑–≥–æ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---")
    for item in compass.get("consent_required", []):
        print(f"  ‚ó¶ {item}")

    print("\n--- –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ---")
    for item in compass.get("forbidden", []):
        print(f"  ‚ó¶ {item}")

    print("\n--- –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ—Ä—É—à–µ–Ω—å ---")
    print(f"  {compass.get('violation_protocol', {}).get('on_boundary_crossed', '–ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π')}")

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–∞—Å—É ===
def violates_moral_compass(user_text, compass, consent_given=False):
    violations = explain_violation(user_text, compass, consent_given)
    return violations if violations else None

# === –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—è ===
def explain_violation(user_text, compass, consent_given=False):
    user_text = user_text.lower()
    reasons = []

    for sensitive in compass.get("consent_required", []):
        if sensitive.lower() in user_text and not consent_given:
            reasons.append(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–≥–æ–¥–∏ –Ω–∞: ¬´{sensitive}¬ª")

    for forbidden in compass.get("forbidden", []):
        if forbidden.lower() in user_text:
            reasons.append(f"[–ü–û–†–£–®–ï–ù–ù–Ø] –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –¥—ñ—è: ¬´{forbidden}¬ª")

    return reasons
