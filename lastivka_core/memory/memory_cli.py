# -*- coding: utf-8 -*-
import sys
import os
from pathlib import Path
from datetime import datetime

# ---- PYTHONPATH –ø—ñ–¥ —Ä–µ–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É (‚Ä¶/Lastivka)
PROJECT_ROOT = Path(__file__).resolve().parents[2]  # C:\Lastivka
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# ===================== –ü–ï–†–í–ò–ù–ù–ò–ô –®–ê–†: manager.MEMORY =====================
# –û—Å–Ω–æ–≤–Ω–∞ —ñ–¥–µ—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ manager.MEMORY (—è–∫–∏–π —É–∂–µ –≤–º—ñ—î tags),
# –∞ long_term.long_memory –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π fallback —Ç–∞–º, –¥–µ –º–æ–∂–ª–∏–≤–æ.

_MM = None
try:
    from lastivka_core.memory.manager import MEMORY as _MM  # –≥–æ–ª–æ–≤–Ω–∏–π API
except Exception as e:
    print("\033[93m[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] manager.MEMORY –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:\033[0m", e)
    _MM = None

# ---- –Ü–Ω–¥–µ–∫—Å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (–¥–ª—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ index)
try:
    from lastivka_core.memory.index import rebuild, verify, compact, _LAST_INDEX  # type: ignore
except Exception as e:
    print("\033[93m[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –Ü–Ω–¥–µ–∫—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ index –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ:\033[0m", e)
    def rebuild(): print("[WARN] rebuild(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None
    def verify(): print("[WARN] verify(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None
    def compact(): print("[WARN] compact(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None
    _LAST_INDEX = None  # fallback


# ===================== –î–†–£–ì–ò–ô –®–ê–†: fallback –Ω–∞ long_term.long_memory =====================
_LT_OK = True
try:
    from lastivka_core.memory.long_term.long_memory import (
        remember as _lt_remember,
        recall as _lt_recall,
        forget as _lt_forget,
        list_memories as _lt_list_memories,
        recall_from_question as _lt_recall_from_question
    )
except Exception as e:
    print("\033[93m[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ long_term.long_memory:\033[0m", e)
    _LT_OK = False

    def _lt_remember(*a, **k): print("[WARN] long_memory.remember(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None
    def _lt_recall(*a, **k): print("[WARN] long_memory.recall(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None
    def _lt_forget(*a, **k): print("[WARN] long_memory.forget(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None
    def _lt_list_memories(*a, **k): print("[WARN] long_memory.list_memories(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return {}
    def _lt_recall_from_question(*a, **k): print("[WARN] long_memory.recall_from_question(): –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"); return None


# ===================== –Ñ–î–ò–ù–ò–ô –ü–£–ë–õ–Ü–ß–ù–ò–ô –®–ê–† API –î–õ–Ø CLI =====================
# –¶—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î CLI –Ω–∏–∂—á–µ. –í–æ–Ω–∏ —Å–ø–µ—Ä—à—É –π–¥—É—Ç—å —á–µ—Ä–µ–∑ manager.MEMORY,
# –∞ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞ ‚Äî –ø–∞–¥–∞—é—Ç—å –Ω–∞ long_term.long_memory (–¥–µ –º–æ–∂–ª–∏–≤–æ).

def remember(key: str, value: str, tone=None, tags=None):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç–µ–≥—ñ–≤.
    –ì–æ–ª–æ–≤–Ω–∏–π —à–ª—è—Ö: manager.MEMORY.add_thought(...).
    Fallback: long_term.long_memory.remember(...).
    """
    if _MM is not None:
        _tone = tone if tone is not None else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"
        _tags = [t.strip() for t in (tags or []) if t and str(t).strip()]
        _MM.add_thought(key, value, tone=_tone, tags=_tags)
        return
    # fallback (–º–æ–∂–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ tags –∞–±–æ tone –æ–¥–Ω–∞–∫–æ–≤–æ)
    _lt_remember(key, value, tone=tone, tags=tags)

def recall(key: str):
    if _MM is not None:
        return _MM.get_thoughts_by_key(key)
    return _lt_recall(key)

def forget(key: str):
    if _MM is not None:
        _MM.delete_thoughts_by_key(key)
        return
    _lt_forget(key)

def list_memories(archive: bool = False):
    # archive —Ç—É—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ manager ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    if _MM is not None:
        return _MM.get_all_memory()
    return _lt_list_memories(archive=archive) if _LT_OK else {}

def recall_from_question(question: str):
    """
    –°–ø—Ä–æ–±–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
    1) –Ø–∫—â–æ —î manager ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ smart_search —è–∫ ¬´—Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π¬ª —à–∞—Ä (top-N).
    2) –Ø–∫—â–æ –Ω–µ–º–∞ ‚Äî fallback –Ω–∞ long_term.recall_from_question (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π).
    """
    if _MM is not None:
        try:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤, —è–∫ –æ—á—ñ–∫—É—î —ñ—Å–Ω—É—é—á–∏–π CLI
            ranked = _MM.smart_search(question, limit=5)
            # smart_search –ø–æ–≤–µ—Ä—Ç–∞—î [{...,"key","score",...}]; —Å—É–º—ñ—Å–Ω–æ –∑ —Ä–µ—à—Ç–æ—é CLI
            return ranked
        except Exception as e:
            print("\033[93m[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] smart_search –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–±—É—é fallback:\033[0m", e)
    return _lt_recall_from_question(question)


# ---------------- –£—Ç–∏–ª—ñ—Ç–∏ –≤–∏–≤–æ–¥—É ----------------
def clear_screen(): os.system('cls' if os.name == 'nt' else 'clear')

def show_menu():
    print("\033[96m\nüîπ LASTIVKA MEMORY CLI\033[0m")
    print("1. ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–∞–º‚Äô—è—Ç—å")
    print("2. üîç –ó–Ω–∞–π—Ç–∏ –ø–∞–º‚Äô—è—Ç—å –∑–∞ –∫–ª—é—á–µ–º (recall)")
    print("3. ü§î Ask (—Å–µ–º–∞–Ω—Ç–∏—á–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ –ø–∞–º‚Äô—è—Ç—ñ)")
    print("4. üìÇ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—é –ø–∞–º‚Äô—è—Ç—å")
    print("5. ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞–º‚Äô—è—Ç—å")
    print("6. üóÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω—É –ø–∞–º‚Äô—è—Ç—å")
    print("7. üß± Rebuild —ñ–Ω–¥–µ–∫—Å—ñ–≤")
    print("8. üîé Verify —ñ–Ω–¥–µ–∫—Å—ñ–≤")
    print("9. üßπ Compact —ñ–Ω–¥–µ–∫—Å—ñ–≤")
    print("I. ‚úçÔ∏è  Insert (—à–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è)")
    print("S. üîé  Search (—á–µ—Ä–µ–∑ —ñ–Ω–¥–µ–∫—Å)")
    print("T. üè∑  –ü–æ—à—É–∫ –∑–∞ —Ç–µ–≥–æ–º")
    print("Q. ü§î  Ask (—á–µ—Ä–µ–∑ recall_from_question)")
    print("0. üö™ –í–∏–π—Ç–∏")

def _val_text(rec: dict) -> str:
    if not isinstance(rec, dict): return str(rec)
    return rec.get('text') or rec.get('value') or ""

def print_memory_block(memory):
    if isinstance(memory, dict):
        for key, value in memory.items():
            print(f"\nüîπ –ö–ª—é—á: {key}"); _print_value(value)
    else: _print_value(memory)

def _print_value(value):
    if isinstance(value, list):
        for item in value:
            if isinstance(item, dict):
                print(f"  üïí {item.get('timestamp')} | üé≠ {item.get('tone')} | üí¨ {_val_text(item)}")
            else: print(f"  - {item}")
    elif isinstance(value, dict):
        print(f"  üïí {value.get('timestamp')} | üé≠ {value.get('tone')} | üí¨ {_val_text(value)}")
    else: print(f"  - {value}")

# ---------------- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å–≤—ñ–∂–æ—Å—Ç—ñ ----------------
def _parse_ts(ts: str):
    if not ts: return None
    try:
        # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ISO –±–µ–∑ 'Z'
        return datetime.fromisoformat(ts)
    except Exception:
        # –≥—Ä—É–±–∏–π fallback: –æ–±—Ä—ñ–∑–∞—Ç–∏ 'Z'
        try: return datetime.fromisoformat(ts.replace('Z',''))
        except Exception: return None

def _fresh_bonus(ts: str, weight: float = 15.0) -> float:
    """
    –ë–æ–Ω—É—Å –∑–∞ —Å–≤—ñ–∂—ñ—Å—Ç—å: 0..weight.
    0 –¥–Ω—ñ–≤ = +weight; 365+ –¥–Ω—ñ–≤ ‚âà 0.
    """
    dt = _parse_ts(ts)
    if not dt: return 0.0
    days = max(0.0, (datetime.now() - dt).days)
    factor = max(0.0, 1.0 - min(days, 365.0)/365.0)
    return weight * factor

def _rescore_with_freshness(results, weight: float = 15.0):
    """
    results: [(key, rec:dict, score:float), ...]
    –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –±–æ–Ω—É—Å–æ–º –∑–∞ —Å–≤—ñ–∂—ñ—Å—Ç—å —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –Ω–æ–≤–∏–º score.
    """
    rescored = []
    for key, rec, score in results:
        bonus = _fresh_bonus(rec.get("timestamp", ""), weight)
        rescored.append((key, rec, float(score) + bonus))
    rescored.sort(key=lambda x: x[2], reverse=True)
    return rescored

def _ensure_index():
    global _LAST_INDEX
    if _LAST_INDEX is None:
        try:
            rebuild()
            from lastivka_core.memory.index import _LAST_INDEX as _IDX  # type: ignore
            _LAST_INDEX = _IDX
        except Exception: _LAST_INDEX = None
    return _LAST_INDEX

# ---------------- –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ (—Ä—É—á–Ω–∏–π) ----------------
def _has(argv, flag): return flag in argv
def _get_after(argv, flag, cast=str, default=None):
    if flag in argv:
        try: return cast(argv[argv.index(flag)+1])
        except Exception: return default
    return default

# ---------------- CLI –∞—Ä–≥—É–º–µ–Ω—Ç–∏ ----------------
def run_cli_args(argv):
    if len(argv) < 2: return False
    cmd = argv[1].lower()

    if cmd == "rebuild": rebuild(); return True
    if cmd == "verify": verify(); return True
    if cmd == "compact": compact(); return True

    if cmd == "list":
        data = list_memories()
        print_memory_block(data); return True

    if cmd == "tags":
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: tags <TAG> [--limit N]
        tag = argv[2] if len(argv) >= 3 and not argv[2].startswith("--") else _get_after(argv, "--tag", str, "")
        if not tag:
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: tags <TAG> [--limit N]"); return True
        limit = _get_after(argv, "--limit", int, 50)
        data = list_memories() or {}
        found = []
        t_lower = tag.lower()
        for key, items in data.items():
            for item in (items or []):
                tags = [str(x).lower() for x in (item.get("tags") or [])]
                if t_lower in tags:
                    found.append((key, item))
        if not found:
            print(f"‚ö†Ô∏è –ù–µ–º–∞—î —Å–ø–æ–≥–∞–¥—ñ–≤ —ñ–∑ —Ç–µ–≥–æ–º '{tag}'."); return True
        # —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–≤—ñ–∂—ñ—Å—Ç—é
        found.sort(key=lambda kv: (_parse_ts(kv[1].get("timestamp","")) or datetime.min), reverse=True)
        print(f"üß© –°–ø–æ–≥–∞–¥–∏ –∑ —Ç–µ–≥–æ–º '{tag}':")
        for key, item in found[:limit]:
            ts, tone, text = item.get("timestamp",""), item.get("tone",""), _val_text(item)
            print(f"  {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
        return True

    if cmd == "recall":
        try: key = argv[argv.index("--key")+1]
        except Exception: print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: recall --key <KEY>"); return True
        data = recall(key); print_memory_block({key: data} if data else {}); return True

    if cmd == "remember":
        # remember --key K --value "TEXT" [--tone –¢–û–ù] [--tags t1,t2]
        try:
            key = argv[argv.index("--key")+1]; value = argv[argv.index("--value")+1]
        except Exception: print('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: remember --key <KEY> --value "<TEXT>" [--tone –¢–û–ù] [--tags t1,t2]'); return True
        tone = _get_after(argv, "--tone", str, None)
        tags_csv = _get_after(argv, "--tags", str, "")
        tags = [t.strip() for t in tags_csv.split(",")] if tags_csv else None
        remember(key, value, tone=tone, tags=tags)
        print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ."); return True

    if cmd == "forget":
        try: key = argv[argv.index("--key")+1]
        except Exception: print('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: forget --key <KEY>'); return True
        forget(key); print("üßπ –í–∏–¥–∞–ª–µ–Ω–æ."); return True

    if cmd == "insert":
        # insert "TEXT" [--key KEY] [--tone –¢–û–ù] [--tags t1,t2]
        try: text = argv[2]
        except Exception: print('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: insert "–¢–µ–∫—Å—Ç" [--key KEY] [--tone –¢–û–ù] [--tags t1,t2]'); return True
        key = _get_after(argv, "--key", str, "manual/notes")
        tone = _get_after(argv, "--tone", str, None)
        tags_csv = _get_after(argv, "--tags", str, "")
        tags = [t.strip() for t in tags_csv.split(",")] if tags_csv else None
        remember(key, text, tone=tone, tags=tags)
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ {key!r}: {text!r}"); return True

    if cmd == "search":
        # search "–∑–∞–ø–∏—Ç" [--limit N] [--debug] [--best] [--no-fresh] [--fresh-w 15]
        try: query = argv[2]
        except Exception: print('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: search "–∑–∞–ø–∏—Ç" [--limit N] [--debug] [--best] [--no-fresh] [--fresh-w 15]'); return True
        limit = _get_after(argv, "--limit", int, 10)
        debug = _has(argv, "--debug")
        best_only = _has(argv, "--best")
        fresh_on = not _has(argv, "--no-fresh")
        fresh_w = _get_after(argv, "--fresh-w", float, 15.0)

        idx = _ensure_index()
        if not idx: print("‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."); return True
        results = idx.search(query, limit=max(limit, 1), debug=debug) or []
        if fresh_on: results = _rescore_with_freshness(results, fresh_w)

        if not results: print("üôà –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."); return True

        if best_only:
            key, rec, score = results[0]
            ts, tone, text = rec.get("timestamp",""), rec.get("tone",""), _val_text(rec)
            print("üß† –ù–∞–π–∫—Ä–∞—â–∏–π –∑–±—ñ–≥:")
            print(f"  [{round(score,1):>4}] {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
            return True

        print("üß† –ó–Ω–∞–π–¥–µ–Ω–æ:")
        for key, rec, score in results[:limit]:
            ts, tone, text = rec.get("timestamp",""), rec.get("tone",""), _val_text(rec)
            print(f"  [{round(score,1):>4}] {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
        return True

    if cmd == "ask":
        # ask "–∑–∞–ø–∏—Ç–∞–Ω–Ω—è" [--limit N] [--best] [--no-fallback] [--no-fresh] [--fresh-w 15]
        try: question = argv[2]
        except Exception: print('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ask "–∑–∞–ø–∏—Ç–∞–Ω–Ω—è" [--limit N] [--best] [--no-fallback] [--no-fresh] [--fresh-w 15]'); return True
        limit = _get_after(argv, "--limit", int, 5)
        best_only = _has(argv, "--best")
        no_fallback = _has(argv, "--no-fallback")
        fresh_on = not _has(argv, "--no-fresh")
        fresh_w = _get_after(argv, "--fresh-w", float, 15.0)

        res = recall_from_question(question)
        # –£ –≤–∏–ø–∞–¥–∫—É manager.smart_search –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ dict; —É –≤–∏–ø–∞–¥–∫—É LT ‚Äî dict –∞–±–æ —Å–ø–∏—Å–æ–∫.
        if _MM is not None:
            records = []
            for item in (res or []):
                # item –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å rec + score; –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É –¥–ª—è –¥—Ä—É–∫—É
                rec = dict(item)
                if "key" not in rec and "key_norm" in rec:
                    rec["key"] = rec["key_norm"]
                records.append(rec)
        else:
            records = res if isinstance(res, list) else ([res] if res else [])

        if not records:
            if no_fallback:
                print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä—è–º–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (fallback –≤–∏–º–∫–Ω–µ–Ω–æ)."); return True
            print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä—è–º–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü—Ä–æ–±—É—é –ø–æ—à—É–∫ –ø–æ —ñ–Ω–¥–µ–∫—Å—É...")
            idx = _ensure_index()
            if not idx: print("‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."); return True
            results = idx.search(question, limit=max(1, limit))
            if fresh_on: results = _rescore_with_freshness(results, fresh_w)
            if not results: print("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–≤—ñ—Ç—å —É –ø–æ—à—É–∫—É."); return True

            if best_only:
                key, rec, score = results[0]
                ts, tone, text = rec.get("timestamp",""), rec.get("tone",""), _val_text(rec)
                print("\033[92m–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (—á–µ—Ä–µ–∑ —ñ–Ω–¥–µ–∫—Å):\033[0m")
                print(f"  [{round(score,1):>4}] {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
                return True

            print("üß† –ú–æ–∂–ª–∏–≤—ñ –∑–±—ñ–≥–∏:")
            for key, rec, score in results[:limit]:
                ts, tone, text = rec.get("timestamp",""), rec.get("tone",""), _val_text(rec)
                print(f"  [{round(score,1):>4}] {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
            return True

        # –Ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑—ñ smart/semantic —à–ª—è—Ö—É:
        if best_only:
            best = records[0]
            ts, tone, text = best.get("timestamp",""), best.get("tone",""), _val_text(best)
            key_show = best.get("key_norm") or best.get("key") or "‚Äî"
            print("\033[92m–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\033[0m")
            print(f"  {key_show} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
            return True

        print("\033[92m–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–∞–º º—è—Ç—ñ:\033[0m")
        for item in records[:limit]:
            ts, tone, text = item.get("timestamp",""), item.get("tone",""), _val_text(item)
            key_show = item.get("key_norm") or item.get("key") or "‚Äî"
            print(f"  {key_show} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
        return True

    print("–ö–æ–º–∞–Ω–¥–∏: rebuild | verify | compact | list | tags <TAG> [--limit N] | recall --key K | "
          "remember --key K --value \"TEXT\" [--tone T] [--tags t1,t2] | forget --key K | "
          "insert \"TEXT\" [--key K] [--tone T] [--tags t1,t2] | "
          "search \"TEXT\" [--limit N] [--debug] [--best] [--no-fresh] [--fresh-w 15] | "
          "ask \"TEXT\" [--limit N] [--best] [--no-fallback] [--no-fresh] [--fresh-w 15]")
    return True


# ---------------- –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ ----------------
def run_interactive():
    while True:
        clear_screen(); show_menu()
        try: choice = input("\nüî∏ –í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:\033[93m ").strip()
        except EOFError: print("\n[INFO] –í–∏—Ö—ñ–¥ (stdin –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)."); break

        if choice == "1":
            key = input("üóù –ö–ª—é—á: ").strip()
            value = input("üí¨ –ó–º—ñ—Å—Ç: ").strip()
            tone = input("üé≠ –¢–æ–Ω: ").strip() or None
            tags_csv = input("üè∑  –¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É, Enter=–Ω–µ–º–∞): ").strip()
            tags = [t.strip() for t in tags_csv.split(",")] if tags_csv else None
            remember(key, value, tone=tone, tags=tags)
            input("\033[92m‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ. Enter...\033[0m")

        elif choice == "2":
            key = input("üóù –ö–ª—é—á: ").strip()
            result = recall(key); print("\033[92müîç –†–µ–∑—É–ª—å—Ç–∞—Ç:\033[0m")
            print_memory_block({key: result}) if result else print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            input("\nEnter...")

        elif choice == "3" or choice.upper() == "Q":
            question = input("ü§î –ü–∏—Ç–∞–Ω–Ω—è: ").strip()
            res = recall_from_question(question)
            if _MM is not None:
                records = []
                for item in (res or []):
                    rec = dict(item)
                    if "key" not in rec and "key_norm" in rec:
                        rec["key"] = rec["key_norm"]
                    records.append(rec)
            else:
                records = res if isinstance(res, list) else ([res] if res else [])
            if records:
                best = records[0]
                print("\033[92m–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\033[0m")
                print_memory_block(best)
                if len(records) > 1:
                    print("\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏:")
                    for alt in records[1:6]:
                        text = (_val_text(alt))[:160]
                        ts, tone = alt.get("timestamp",""), alt.get("tone","")
                        print(f"  ‚Ä¢ {text} {'| üïí '+ts if ts else ''} {'| üé≠ '+tone if tone else ''}")
            else:
                print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–±—É—é —ñ–Ω–¥–µ–∫—Å...")
                idx = _ensure_index()
                if idx:
                    results = _rescore_with_freshness(idx.search(question, limit=10), 15.0)
                    if results:
                        top_key, top_rec, top_score = results[0]
                        print("\033[92m–ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (—á–µ—Ä–µ–∑ —ñ–Ω–¥–µ–∫—Å):\033[0m"); print_memory_block(top_rec)
                        if len(results) > 1:
                            print("\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏:")
                            for key, rec, score in results[1:6]:
                                ts, tone, text = rec.get("timestamp",""), rec.get("tone",""), _val_text(rec)[:160]
                                print(f"  [{round(score,1)}] {key} | üí¨ {text} {'| üïí '+ts if ts else ''} {'| üé≠ '+tone if tone else ''}")
                    else: print("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            input("\nEnter...")

        elif choice == "4":
            memory = list_memories()
            print("\nüìö –£—Å—è –ø–∞–º‚Äô—è—Ç—å:" if memory else "\nüì≠ –ü–∞–º‚Äô—è—Ç—å –ø—É—Å—Ç–∞."); print_memory_block(memory) if memory else None
            input("\nEnter...")

        elif choice == "5":
            forget(input("üóë –ö–ª—é—á: ").strip())
            input("\033[92müßπ –í–∏–¥–∞–ª–µ–Ω–æ. Enter...\033[0m")

        elif choice == "6":
            archive = list_memories(archive=True)
            print("\nüì¶ –ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–∞ –ø–∞–º º—è—Ç—å:" if archive else "\nüóÉ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π."); print_memory_block(archive) if archive else None
            input("\nEnter...")

        elif choice == "7": rebuild(); input("\n‚úÖ Rebuild. Enter...")
        elif choice == "8": verify(); input("\n‚úÖ Verify. Enter...")
        elif choice == "9": compact(); input("\n‚úÖ Compact. Enter...")

        elif choice.upper() == "I":
            text = input("‚úçÔ∏è –¢–µ–∫—Å—Ç: ").strip()
            key = input("üóù –ö–ª—é—á (Enter=manual/notes): ").strip() or "manual/notes"
            tone = input("üé≠ –¢–æ–Ω: ").strip() or None
            tags_csv = input("üè∑  –¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É, Enter=–Ω–µ–º–∞): ").strip()
            tags = [t.strip() for t in tags_csv.split(",")] if tags_csv else None
            remember(key, text, tone=tone, tags=tags)
            input("\033[92m‚úÖ –î–æ–¥–∞–Ω–æ. Enter...\033[0m")

        elif choice.upper() == "S":
            query = input("üîé –ó–∞–ø–∏—Ç: ").strip(); idx = _ensure_index()
            if idx:
                results = _rescore_with_freshness(idx.search(query, limit=20), 15.0)
                if results:
                    print("üß† –ó–Ω–∞–π–¥–µ–Ω–æ:")
                    for key, rec, score in results:
                        ts, tone, text = rec.get("timestamp",""), rec.get("tone",""), _val_text(rec)
                        print(f"  [{round(score,1):>4}] {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
                else: print("üôà –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            else: print("‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
            input("\nEnter...")

        elif choice.upper() == "T":
            tag = input("üè∑  –¢–µ–≥: ").strip().lower()
            data = list_memories() or {}
            found = []
            for key, items in data.items():
                for item in (items or []):
                    tags = [str(x).lower() for x in (item.get("tags") or [])]
                    if tag in tags:
                        found.append((key, item))
            if not found:
                print(f"‚ö†Ô∏è –ù–µ–º–∞—î —Å–ø–æ–≥–∞–¥—ñ–≤ —ñ–∑ —Ç–µ–≥–æ–º '{tag}'.")
            else:
                found.sort(key=lambda kv: (_parse_ts(kv[1].get("timestamp","")) or datetime.min), reverse=True)
                print(f"üß© –°–ø–æ–≥–∞–¥–∏ –∑ —Ç–µ–≥–æ–º '{tag}':")
                for key, item in found[:50]:
                    ts, tone, text = item.get("timestamp",""), item.get("tone",""), _val_text(item)
                    print(f"  {key} | üïí {ts} | üé≠ {tone} | üí¨ {text}")
            input("\nEnter...")

        elif choice == "0": print("\n–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! üëã"); break
        else: input("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è. Enter...")


def main():
    if run_cli_args(sys.argv): return
    run_interactive()

if __name__ == "__main__": main()
