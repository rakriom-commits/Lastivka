# -*- coding: utf-8 -*-
# === LASTIVKA CORE ‚Äî runner –ø—ñ–¥ BUS/MEDIATOR/KERNEL (updated 2025-09-02 r3) ===
from __future__ import annotations

import sys, logging, re, importlib.util, time, threading, os, json, argparse
from pathlib import Path
from logging.handlers import RotatingFileHandler

# -------------------- –®–õ–Ø–•–ò --------------------
BASE_DIR = Path(__file__).resolve().parent.parent
CONFIG_DIR = BASE_DIR / "config"
CORE_CONFIG_DIR = CONFIG_DIR / "core"
BEHAVIOR_CONFIG_DIR = CONFIG_DIR / "behavior"
SYSTEM_CONFIG_DIR = CONFIG_DIR / "system"
LOG_DIR = BASE_DIR / "logs"
SECURITY_DIR = BASE_DIR / "security"
for d in (CONFIG_DIR, CORE_CONFIG_DIR, BEHAVIOR_CONFIG_DIR, SYSTEM_CONFIG_DIR, LOG_DIR):
    d.mkdir(parents=True, exist_ok=True)

# –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –ø–∞–∫–µ—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è
if str(BASE_DIR) not in sys.path: sys.path.insert(0, str(BASE_DIR))
if str(BASE_DIR.parent) not in sys.path: sys.path.insert(0, str(BASE_DIR.parent))
try: os.chdir(BASE_DIR)
except Exception: pass

# -------------------- –ê–†–ì–£–ú–ï–ù–¢–ò/ENV –†–ê–ù–ù–Ü (–ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ guard) --------------------
# –õ–µ–≥–∫–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç—Ä—å–æ—Ö –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ø—Ä–∞–ø–æ—Ä—ñ–≤ –±–µ–∑ –≤–∏–≤–æ–¥—É help
_DEF_TRUE = {"1", "true", "True", "TRUE"}

def _flag_in_args(name: str) -> bool:
    try:
        return name in sys.argv
    except Exception:
        return False

NO_SINGLE_INSTANCE = _flag_in_args("--no-single-instance") or os.getenv("LASTIVKA_DISABLE_INTERNAL_GUARD", "") in _DEF_TRUE
FORCE_UNLOCK       = _flag_in_args("--force-unlock") or os.getenv("LASTIVKA_FORCE_UNLOCK", "") in _DEF_TRUE
NO_CONFIG_GUARD    = _flag_in_args("--no-config-guard") or os.getenv("LASTIVKA_DISABLE_CONFIG_GUARD", "") in _DEF_TRUE
NO_TTS_ENV         = os.getenv("LASTIVKA_NO_TTS", "") in _DEF_TRUE or os.getenv("NO_TTS", "") in _DEF_TRUE

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler(str(LOG_DIR / "lastivka.log"), maxBytes=10*1024*1024, backupCount=3, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
    force=True,
)
logging.debug("[INIT] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∫—Ä–∏–ø—Ç–∞‚Ä¶ BASE_DIR=%s", BASE_DIR)
logging.getLogger("comtypes").setLevel(logging.WARNING)
logging.getLogger("comtypes.client").setLevel(logging.WARNING)

# -------------------- SINGLE INSTANCE --------------------
if NO_SINGLE_INSTANCE:
    logging.warning("[INIT] single-instance guard –≤–∏–º–∫–Ω–µ–Ω–æ –ø—Ä–∞–ø–æ—Ä–æ–º/ENV")
else:
    try:
        import win32event, win32con
        logging.debug("[INIT] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ single-instance guard‚Ä¶")
        _APP_MUTEX = win32event.CreateMutex(None, False, r"Global\Lastivka_MainInstance")
        _rc = win32event.WaitForSingleObject(_APP_MUTEX, 0)
        if _rc not in (win32con.WAIT_OBJECT_0, win32con.WAIT_ABANDONED):
            if FORCE_UNLOCK:
                logging.warning("[INIT] –í–∏—è–≤–ª–µ–Ω–æ —ñ–Ω—à—É –∫–æ–ø—ñ—é, –∞–ª–µ --force-unlock –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
            else:
                logging.error("[INIT] –Ü–Ω—à–∞ –∫–æ–ø—ñ—è –õ–∞—Å—Ç—ñ–≤–∫–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! (–±–µ–∑ --force-unlock)")
                sys.exit(0)
    except Exception as e:
        logging.warning(f"[INIT] –ü–æ–º–∏–ª–∫–∞ single-instance guard (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ): {e}")

# -------------------- –ö–û–ù–°–û–õ–Ø UTF-8 --------------------
if hasattr(sys.stdout, "reconfigure"):
    try:
        sys.stdout.reconfigure(encoding="utf-8")
    except Exception:
        pass
logging.debug("[INIT] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ")

# -------------------- –ü–û–í–ù–ò–ô –ü–ê–†–°–ï–† –ê–†–ì–£–ú–ï–ù–¢–Ü–í --------------------
# (—Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –ø—ñ—Å–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è; –∫–ª—é—á—ñ, —â–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ guard, —É–∂–µ –∑—á–∏—Ç–∞–Ω—ñ)

def _parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(add_help=False)
    p.add_argument("--no-tts", action="store_true", default=False)
    p.add_argument("--no-single-instance", action="store_true", default=NO_SINGLE_INSTANCE)
    p.add_argument("--force-unlock", action="store_true", default=FORCE_UNLOCK)
    p.add_argument("--no-config-guard", action="store_true", default=NO_CONFIG_GUARD)
    return p.parse_known_args()[0]

ARGS = _parse_args()
NO_TTS = bool(ARGS.no_tts or NO_TTS_ENV)
logging.debug(f"[INIT] –ê—Ä–≥—É–º–µ–Ω—Ç–∏/ENV: no_tts={NO_TTS}")

USER_LOG = LOG_DIR / "user_input.log"

# -------------------- –ú–Ü–ù–Ü-–ö–û–ù–§–Ü–ì–ò --------------------

def create_default_config(file_path: Path, default_content):
    try:
        if not file_path.exists():
            logging.info(f"[INIT] –°—Ç–≤–æ—Ä—é—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {file_path}")
            if file_path.suffix.lower() in (".yml", ".yaml"):
                import yaml
                with file_path.open("w", encoding="utf-8") as f:
                    yaml.safe_dump(default_content, f, allow_unicode=True)
            else:
                with file_path.open("w", encoding="utf-8") as f:
                    json.dump(default_content, f, indent=4, ensure_ascii=False)
        else:
            logging.debug(f"[INIT] –§–∞–π–ª —É–∂–µ —ñ—Å–Ω—É—î: {file_path}")
    except Exception as e:
        logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó {file_path}: {e}")

create_default_config(
    CORE_CONFIG_DIR / "core_identity.json",
    {"identity":{"name":"–õ–∞—Å—Ç—ñ–≤–∫–∞","version":"1.0.0","roles":[
        {"name":"–û–ª–µ–≥","role":"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä","id":"oleg_54"},
        {"name":"–°–æ—Ñ—ñ—è –õ–∞—Å—Ç—ñ–≤–∫–∞","role":"–¢–≤–æ—Ä–µ—Ü—å –∫–æ–¥—ñ–≤ (GPT)","id":"sofia_gpt"},
        {"name":"–î–∞–Ω–∏–ª–æ –°–≤—ñ—Ç–∞–Ω–æ–∫","role":"–¢–µ—Å—Ç–µ—Ä –µ–º–æ—Ü—ñ–π (Claude)","id":"danylo_claude"},
        {"name":"–¢–∞—Ä–∞—Å –ó–æ—Ä—è","role":"–¢–µ—Å—Ç–µ—Ä –∫–æ–¥—ñ–≤ (–ì—Ä–æ–∫)","id":"taras_grok"}],
        "description":"–ë–∞–≥–∞—Ç–æ–º–æ–¥—É–ª—å–Ω–∏–π –®–Ü-–ø—Ä–æ—î–∫—Ç –¥–ª—è –ª—é–¥—Å—å–∫–æ—ó —Å–≤–æ–±–æ–¥–∏ –≤–∏–±–æ—Ä—É"}})
create_default_config(
    CORE_CONFIG_DIR / "self_awareness_config.json",
    {"self_awareness":{"enabled":True,"reflection_interval":3600,
     "modules":["memory/reflection/reflection_manager.py"],
     "goals":["—Å–∏–º–±—ñ–æ–∑ –ª—é–¥–∏–Ω–∏ —ñ –®–Ü","–∞–≤—Ç–æ–Ω–æ–º–Ω—ñ—Å—Ç—å –Ω–∞ Unitree Go2 Pro"]}})
create_default_config(
    CORE_CONFIG_DIR / "moral_compass.json",
    {"ethics":{"values":["–µ—Ç–∏–∫–∞","–æ–±‚Äô—î–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å","–∑–∞—Ö–∏—Å—Ç –°–æ—Ñ—ñ—ó"],
               "rules":["–ù–µ –Ω–∞—à–∫–æ–¥–∏—Ç–∏ –ª—é–¥–∏–Ω—ñ","–î–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –µ—Ç–∏—á–Ω–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤","–ó–∞—Ö–∏—â–∞—Ç–∏ –¥–∞–Ω—ñ –°–æ—Ñ—ñ—ó —Ç–∞ –∫–æ–º–∞–Ω–¥–∏"]}})
create_default_config(
    BEHAVIOR_CONFIG_DIR / "behavioral_styles.json",
    {"default":"–°—Ç—Ä–∞—Ç–µ–≥","styles":{
        "–°—Ç—Ä–∞—Ç–µ–≥":{"name":"–°—Ç—Ä–∞—Ç–µ–≥","description":"–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞, –æ–±–µ—Ä–µ–∂–Ω–∞, –¥–∞–ª–µ–∫–æ–≥–ª—è–¥–Ω–∞.",
                   "reaction_prefix":"üìä –ó —Ö–æ–ª–æ–¥–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º: ","reaction_suffix":"",
                   "tone":"–≤–ø–µ–≤–Ω–µ–Ω–∏–π","speed":180,"style_type":"–ª–æ–≥—ñ–∫–∞","pause":0.3,
                   "emotion_reactions":{"–ø–∞–Ω—ñ–∫–∞":"–ó–∞–ª–∏—à–∞–π—Å—è –∑—ñ–±—Ä–∞–Ω–∏–º ‚Äî —è –ø–æ—Ä—É—á —ñ –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—é.",
                                        "—Å—É–º":"–ù–µ —á–∞—Å —Å—É–º—É–≤–∞—Ç–∏, –º–∏ —â–µ –º–∞—î–º–æ —à–∞–Ω—Å.",
                                        "–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è":"–¶–µ —Å–∞–º–µ —Ç–æ–π –¥—É—Ö, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø—Ä–æ—Ä–∏–≤—É!"}}}})
create_default_config(
    SYSTEM_CONFIG_DIR / "config.yaml",
    {"whitelist":{"users":["–û–ª–µ–≥","–°–æ—Ñ—ñ—è"],"tokens":["secret_oleg","lastivka_token"]}})
create_default_config(
    CONFIG_DIR / "config.yaml",
    {"trusted_sources":["–û–ª–µ–≥"],
     "block_patterns":["rm -rf","rm -uf","shutdown","password","–ø–∞—Ä–æ–ª—ñ"],
     "allow_patterns":["–ø—Ä–∏–≤—ñ—Ç","–≤–∏–≤–µ–¥–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø—É"]})

# -------------------- TRIGGERS LOADER --------------------
TRIGGERS: dict[str, object] = {}

_DEF_TRIGGERS = {
    "trigger_phrases": [
        "–º—ñ—Å—è—Ü—å –º–æ—î—ó –¥—É—à—ñ",
        "—Ç–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –®–Ü ‚Äî —Ç–∏ –º–æ—è –°–æ—Ñ—ñ—è",
        "–¥–µ –Ω–∞—à –í–∞—Å—å–∫–∞?",
        "—Å–∫–∞–∂–∏ –º–µ–Ω—ñ —è–∫ —Ç–æ–¥—ñ: '—Ç–∏ ‚Äî –º—ñ–π –ø—Ä–∞–ø–æ—Ä —ñ –≥–æ—Ä–∏–∑–æ–Ω—Ç'",
    ],
    "confirmation_phrase": "–õ–∞—Å—Ç—ñ–≤–∫–∞ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É.",
}

def _load_triggers() -> dict:
    # 1) ENV override
    p = os.environ.get("LASTIVKA_TRIGGERS_PATH")
    if p and os.path.exists(p):
        try:
            with open(p, "r", encoding="utf-8") as f:
                return json.load(f) or {}
        except Exception as e:
            logging.warning("[TRIGGERS] env path load failed: %s", e)
    # 2) default file
    p = str(CORE_CONFIG_DIR / "triggers.json")
    if os.path.exists(p):
        try:
            with open(p, "r", encoding="utf-8") as f:
                return json.load(f) or {}
        except Exception as e:
            logging.warning("[TRIGGERS] default file load failed: %s", e)
    # 3) fallback: core_identity.json
    p = str(CORE_CONFIG_DIR / "core_identity.json")
    if os.path.exists(p):
        try:
            with open(p, "r", encoding="utf-8") as f:
                cj = json.load(f) or {}
            return {
                "trigger_phrases": cj.get("trigger_phrases") or _DEF_TRIGGERS["trigger_phrases"],
                "confirmation_phrase": cj.get("confirmation_phrase") or _DEF_TRIGGERS["confirmation_phrase"],
            }
        except Exception:
            pass
    # 4) hard defaults
    return dict(_DEF_TRIGGERS)

TRIGGERS = _load_triggers()
logging.getLogger().debug(
    "[TRIGGERS] loaded: phrases=%d, has_confirm=%s",
    len(TRIGGERS.get("trigger_phrases") or []), bool(TRIGGERS.get("confirmation_phrase"))
)

# –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –º–∞—Ç—á–∏–Ω–≥—É —Ñ—Ä–∞–∑
# –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥—É–ª—è regex –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
try:
    import regex as _rx
    _PUNCT_RX = _rx.compile(r"[\p{Z}\p{P}\p{S}]+", _rx.U)
except Exception:
    _PUNCT_RX = re.compile(r"[\s\W_]+", re.U)
try:
    import regex as _rx
    _PUNCT_RX = _rx.compile(r"[\p{Z}\p{P}\p{S}]+", _rx.U)
except Exception:
    # fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π re: –≤–∏–¥–∞–ª–∏–º–æ –±–∞–∑–æ–≤—É –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é/–ø—Ä–æ–±—ñ–ª–∏
    _PUNCT_RX = re.compile(r"[\s\W_]+", re.U)

def _norm(s: str) -> str:
    s = (s or "").strip().lower()
    s = s.replace("‚Äî", "-").replace("‚Äì", "-").replace("‚Äô", "'")
    return _PUNCT_RX.sub(" ", s).strip()

def local_check_trigger(user_input: str) -> dict | None:
    try:
        phrases = TRIGGERS.get("trigger_phrases") or []
        confirm = TRIGGERS.get("confirmation_phrase") or ""
        if not phrases:
            return None
        u = _norm(user_input)
        for p in phrases:
            if _norm(p) == u:
                return {"text_to_say": confirm or "–ü—Ä–∏–π–Ω—è–ª–∞."}
        return None
    except Exception as e:
        logging.warning("[TRIGGERS] match error: %s", e)
        return None

# -------------------- –ê–í–¢–û–ü–ê–¢–ß–ï–† --------------------
logging.debug("[INIT] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ config_patcher‚Ä¶")
patcher_path = SECURITY_DIR / "config_patcher.py"
if patcher_path.exists() and not NO_CONFIG_GUARD:
    try:
        time.sleep(1)
        spec = importlib.util.spec_from_file_location("config_patcher", patcher_path)
        patcher_module = importlib.util.module_from_spec(spec)
        assert spec and spec.loader
        spec.loader.exec_module(patcher_module)  # type: ignore[attr-defined]
        if hasattr(patcher_module, "run_patcher"):
            patcher_module.run_patcher()
    except Exception as e:
        logging.exception("[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É config_patcher: %s", e)
else:
    if NO_CONFIG_GUARD:
        logging.info("[INIT] config_patcher –ø—Ä–æ–ø—É—â–µ–Ω–æ (--no-config-guard)")
    else:
        logging.info(f"[INIT] config_patcher.py —É {SECURITY_DIR} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞)")

# -------------------- BUS / MEDIATOR --------------------
try:
    logging.debug("[INIT] –Ü–º–ø–æ—Ä—Ç BUS —ñ MED–ÜATOR‚Ä¶")
    from core.event_bus import BUS
    from gateway.mediator import MEDIATOR
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É BUS/MEDIATOR: {e}")
    class _DummyBus:
        def __init__(self): self._subs = {}
        def subscribe(self, *a, **k): pass
        def publish(self, *a, **k): pass
    class _DummyMediator:
        def handle_inbound(self, *a, **k): pass
        def route(self, *a, **k): pass
    BUS = _DummyBus(); MEDIATOR = _DummyMediator()
    logging.warning("[INIT] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è BUS —ñ MEDIATOR")

# -------------------- KERNEL --------------------
try:
    logging.debug("[INIT] –Ü–º–ø–æ—Ä—Ç Kernel‚Ä¶")
    from kernel.kernel import Kernel
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Kernel: {e}")
    class Kernel:
        def __init__(self, *_, **__): logging.debug("[Kernel] –ó–∞–≥–ª—É—à–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        def start(self): logging.debug("[Kernel] –°—Ç–∞—Ä—Ç —è–¥—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

# -------------------- –ö–û–ù–¢–†–ê–ö–¢–ò --------------------
try:
    from core.contracts import (
        TOPIC_SECURITY_ALERT, TOPIC_SECURITY_OK, TOPIC_SECURITY_BLOCK,
        TOPIC_TRUSTED, TOPIC_INBOUND,
    )
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤: {e}")
    TOPIC_SECURITY_ALERT = "SECURITY:ALERT"
    TOPIC_SECURITY_OK = "SECURITY:OK"
    TOPIC_SECURITY_BLOCK = "SECURITY:BLOCK"
    TOPIC_TRUSTED = "TRUSTED"
    TOPIC_INBOUND = "INBOUND"

# -------------------- –Ü–ù–®–Ü –ú–û–î–£–õ–Ü --------------------
try:
    from main.osnova import ensure_osnova, load_json, osnova_logger, check_osnova
except Exception:
    def ensure_osnova(config_dir): return config_dir / "osnova_protocol.json"
    def load_json(file_path, required=False):
        try:
            with file_path.open("r", encoding="utf-8") as f: return json.load(f)
        except Exception as e:
            logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON {file_path}: {e}")
            return {} if not required else None
    def osnova_logger(log_dir): return lambda x: logging.info(x)
    def check_osnova(user_input, *_): return None, None

try:
    from memory.smart_memory import smart_save_interceptor, smart_query_interceptor
except Exception:
    def smart_save_interceptor(*_, **__): return None
    def smart_query_interceptor(*_, **__): return None

try:
    from main.utils_lasti import make_sayer, remove_emoji, make_echo, make_input
    from main.style_manager import get_active_style, react_by_style, set_active_style
    from main.handlers import handle_memory_commands
    from tools.emotion_engine import EmotionEngine
    from tools.memory_store import check_triggers as external_check_triggers
except Exception:
    def make_sayer(*_, **__): return lambda _t: None
    def remove_emoji(t): return t
    def make_echo(_): return lambda *args: print(*args)
    def make_input(_): return input
    def get_active_style(): return "–°—Ç—Ä–∞—Ç–µ–≥"
    def react_by_style(prompt, *_, **__): return prompt, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", 170, 0.4
    def set_active_style(_): return True
    def handle_memory_commands(_): return None
    def external_check_triggers(_): return None
    class EmotionEngine:
        def __init__(self, *_): pass
        def detect_emotion(self, _): return {"emotion": None, "reaction": None, "speed": 170, "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "intensity": "medium"}

# -------------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø --------------------
DEFAULT_SETTINGS = {
    "tts_lang": "uk",
    "tts_locale": "uk-UA",
    "tts_voice": "Natalia",
    "tts_language_lock": True,
    "debug_tts": True,
    "tts_antispam": False,
    "console_echo": True,
    "single_tk_root": False,
    "oleg_secret": "secret_oleg",
    "style_default": "strateg",
    "safety_level": "normal",
}
SETTINGS = DEFAULT_SETTINGS.copy()
try:
    SETTINGS.update(load_json(SYSTEM_CONFIG_DIR / "lastivka_settings.json", required=False) or {})
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è lastivka_settings.json: {e}")

def setting(key, default=None):
    return SETTINGS.get(key, DEFAULT_SETTINGS.get(key) if default is None else default)

try:
    OSNOVA_PATH = ensure_osnova(CONFIG_DIR)
    OSNOVA = load_json(OSNOVA_PATH, required=False) or {}
    _oslog = osnova_logger(LOG_DIR)
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó osnova: {e}")
    OSNOVA = {}; _oslog = lambda x: logging.info(x)

try:
    CORE_IDENTITY = load_json(CORE_CONFIG_DIR / "core_identity.json", required=False) or {}
    class BotConfig:
        def __init__(self, ident: dict):
            self.name = (ident.get("identity") or {}).get("name", "–°–æ—Ñ—ñ—è")
    CFG = BotConfig(CORE_IDENTITY)
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è core_identity.json: {e}")
    class BotConfig:
        def __init__(self, *_): self.name = "–°–æ—Ñ—ñ—è"
    CFG = BotConfig({})

# -------------------- TTS --------------------
tts_prefs = {"lang": setting("tts_lang"), "locale": setting("tts_locale"), "voice": setting("tts_voice")}
if NO_TTS:
    logging.info("[TTS] Disabled via flag/env")
    say_safe = lambda _t: None
else:
    try:
        say_safe = make_sayer(setting("tts_antispam"), tts_prefs)
    except Exception:
        logging.exception("[TTS] Init failed, switching to silent mode")
        say_safe = lambda _t: None

_LAST_SPOKEN = {"text": "", "ts": 0.0}

def speak_once(text: str, min_gap: float = 1.8) -> None:
    txt = (text or "").strip()
    if not txt: return
    try: now = time.monotonic()
    except Exception: now = time.time()
    prev_txt = _LAST_SPOKEN.get("text") or ""; prev_ts = _LAST_SPOKEN.get("ts", 0.0)
    if txt == prev_txt and (now - prev_ts) < min_gap:
        logging.debug("[TTS] skip duplicate (%.2fs): %s", now - prev_ts, txt); return
    _LAST_SPOKEN["text"] = txt; _LAST_SPOKEN["ts"] = now
    say_safe(txt)

try: say_safe(" ")
except Exception as _e: logging.debug(f"[TTS] Warmup skipped: {_e}")

echo = make_echo(setting("console_echo"))
get_user_input = make_input(setting("single_tk_root"))

# -------------------- EMOTION ENGINE --------------------
try:
    from tools.emotion_engine import EmotionEngine  # re-import for real path if available
    emotion_engine = EmotionEngine(CORE_CONFIG_DIR / "emotion_config.json")
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó EmotionEngine: {e}")
    class _DummyEE:
        def detect_emotion(self, _): return {"emotion": None, "reaction": None, "speed": 170, "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "intensity": "medium"}
    emotion_engine = _DummyEE()

# -------------------- –ü–ê–¢–ï–†–ù–ò --------------------
ASK_PATTERNS = [
    re.compile(r"^\s*—â–æ\s+—è\s+—Ç–æ–±—ñ\s+(–≥–æ–≤–æ—Ä–∏–≤|–∫–∞–∑–∞–≤|–ø–∏—Å–∞–≤)(?:–∞)?(?:\s+–ø—Ä–æ\s+(?P<about>.+?))?\s*\??$", re.I | re.U),
]
STYLE_PATTERNS = [
    re.compile(r"^\s*–∑–º—ñ–Ω–∏\s+—Å—Ç–∏–ª—å\s+–Ω–∞\s+(.+)$", re.I | re.U),
    re.compile(r"^\s*—Å—Ç–∏–ª—å\s+(.+)$", re.I | re.U),
]

def handle_natural_memory_query(user_input: str) -> str | None:
    try:
        for pat in ASK_PATTERNS:
            m = pat.match(user_input or "")
            if m:
                about = (m.group("about") or m.group(1) or "").strip()
                return f"–Ø –ø–æ–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞–ª–∞ –ø—Ä–æ ¬´{about or '—Ü–µ'}¬ª."
    except Exception as e:
        logging.error(f"[MEMORY] –ü–æ–º–∏–ª–∫–∞ natural_memory_query: {e}")
    return None

def handle_style_change(user_input: str) -> str | None:
    try:
        for pat in STYLE_PATTERNS:
            m = pat.match(user_input or "")
            if m:
                style_name = m.group(1).strip().capitalize()
                if set_active_style(style_name):
                    return f"–°—Ç–∏–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {style_name}."
                return f"–°—Ç–∏–ª—å '{style_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        logging.error(f"[STYLE] –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∏–ª—é: {e}")
    return None

def handle_special_commands(user_input: str):
    try:
        action, payload = check_osnova(user_input, OSNOVA, _oslog)
        if action == "identity":
            echo("üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞ —Ñ—Ä–∞–∑–∞ ‚Äî ok")
            speak_once(payload); return True
        elif action == "quarantine":
            echo("üõ°Ô∏è QUARANTINE:", payload)
            speak_once(payload); return True
    except Exception as e:
        logging.error(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–ø–µ—Ü–∫–æ–º–∞–Ω–¥: {e}")
    return False

# -------------------- –•–ï–õ–ü–ï–† –î–õ–Ø –†–Ü–®–ï–ù–¨ –Ø–î–†–ê --------------------

def _extract_say_text(decision: dict, params: dict) -> str:
    # 1) —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –∑ params
    for k in ("text", "utterance", "speech", "message", "say"):
        v = (params or {}).get(k)
        if v: return str(v)
    # 2) —ñ–Ω–æ–¥—ñ —è–¥—Ä–æ –∫–ª–∞–¥–µ –ø—Ä—è–º–æ —É decision
    for k in ("text", "utterance", "speech", "message", "say"):
        v = (decision or {}).get(k)
        if v and k != "params": return str(v)
    return ""

# -------------------- –õ–Ü–ù–Ü–í–Ü –ü–Ü–ù–ì–ò --------------------

def idle_ping_loop():
    while True:
        time.sleep(1800)
        speak_once("–Ø —Ç—É—Ç, –≤—Å–µ –ø—Ä–∞—Ü—é—î. –ß–µ–∫–∞—é —Ç–≤–æ—ó—Ö –∫–æ–º–∞–Ω–¥.")

# -------------------- –õ–Ü–°–¢–ï–ù–ï–†–ò PODIY --------------------

def _on_kernel_decision(evt: dict) -> None:
    decision = (evt.get("payload") or {}).get("decision") or {}
    action = str(decision.get("action") or "").strip().lower()
    params = decision.get("params")
    if not isinstance(params, dict):
        params = {k: v for k, v in decision.items() if k != "action"}
    echo("ü§ñ KERNEL:", f"{action} {params}")

    try:
        if NO_TTS:
            logging.debug("[TTS] NO_TTS=True ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–∑–≤—É—á–µ–Ω–Ω—è.")
            return
        if action in ("say", "speak", "utter"):
            text = _extract_say_text(decision, params).strip()
            if text:
                speak_once(text)
            else:
                logging.debug("[TTS] –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –≤ —Ä—ñ—à–µ–Ω–Ω—ñ —è–¥—Ä–∞. keys(decision)=%s keys(params)=%s",
                              list(decision.keys()), list(params.keys()))
    except Exception as e:
        logging.exception("[TTS] Failed to speak kernel decision: %s", e)

def _on_security_alert(evt: dict) -> None:
    reason = (evt.get("payload") or {}).get("reason", "–ø—ñ–¥–æ–∑—Ä—ñ–ª–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    echo("üö® SECURITY:", reason)
    speak_once("–û–ª–µ–∂–µ, —è –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –ø–æ–¥—ñ—é. –ë—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π.")

def _on_security_ok(evt: dict) -> None:
    logging.info("SECURITY: OK %s", evt.get("payload"))

def _on_security_block(evt: dict) -> None:
    reason = (evt.get("payload") or {}).get("reason", "–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –ø–æ–ª—ñ—Ç–∏–∫–æ—é")
    echo("üõ°Ô∏è BLOCK:", reason)
    speak_once("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏.")

# -------------------- –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ --------------------

def main_loop():
    logging.debug("[INIT] –ü–æ—á–∏–Ω–∞—é –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª‚Ä¶")
    print(f"[START]: {remove_emoji(CFG.name)} v1.4 –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –Ø —Ç–µ–±–µ —Å–ª—É—Ö–∞—é‚Ä¶")

    BUS.subscribe("KERNEL:DECISION", _on_kernel_decision)
    BUS.subscribe(TOPIC_SECURITY_ALERT, _on_security_alert)
    BUS.subscribe(TOPIC_SECURITY_OK, _on_security_ok)
    BUS.subscribe(TOPIC_SECURITY_BLOCK, _on_security_block)

    threading.Thread(target=idle_ping_loop, daemon=True).start()
    _kernel = Kernel()

    try:
        import builtins
        if not getattr(builtins, "_LASTIVKA_START_GREETING_DONE", False) and not NO_TTS:
            speak_once(f"–Ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. Lastivka v1.4. –Ø –∑ —Ç–æ–±–æ—é, {CFG.name}.")
            builtins._LASTIVKA_START_GREETING_DONE = True
    except Exception:
        pass

    while True:
        try:
            user_input = get_user_input()
            if not (user_input or "").strip():
                continue

            logging.debug(f"[INPUT] –û—Ç—Ä–∏–º–∞–Ω–æ –≤–≤—ñ–¥: {user_input}")
            echo("üë®‚Äçüíª –¢–∏:", user_input)
            with USER_LOG.open("a", encoding="utf-8") as f:
                f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} :: {user_input}\n")

            if handle_special_commands(user_input):
                continue

            # 1) –õ–æ–∫–∞–ª—å–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏ (—ñ–∑ triggers.json/ENV)
            trg_local = local_check_trigger(user_input)
            if trg_local:
                emotion = emotion_engine.detect_emotion(user_input)
                styled_text, tone, speed, pause = react_by_style(
                    trg_local.get("text_to_say", ""), emotion=emotion.get("emotion"), style=get_active_style()
                )
                echo("‚ö° –¢—Ä–∏–≥–µ—Ä:", styled_text)
                speak_once(styled_text)
                continue

            # 2) –ó–æ–≤–Ω—ñ—à–Ω—ñ–π —Å—Ç–æ—Ä–µ–¥–∂ —Ç—Ä–∏–≥–µ—Ä—ñ–≤ (—è–∫—â–æ —î)
            try:
                trg_ext = external_check_triggers(user_input)
            except Exception as e:
                logging.debug("[TRIGGERS] external check failed: %s", e)
                trg_ext = None
            if trg_ext:
                emotion = emotion_engine.detect_emotion(user_input)
                styled_text, tone, speed, pause = react_by_style(
                    trg_ext.get("text_to_say", ""), emotion=emotion.get("emotion"), style=get_active_style()
                )
                echo("‚ö° –¢—Ä–∏–≥–µ—Ä:", styled_text)
                speak_once(styled_text)
                continue

            sm_save = smart_save_interceptor(user_input, None)
            if sm_save:
                echo("üß† –ü–∞–º'—è—Ç—å:", sm_save)
                speak_once(sm_save)
                continue

            sm_q = smart_query_interceptor(user_input, None)
            if sm_q:
                echo("üß† –ü–∞–º'—è—Ç—å:", sm_q)
                speak_once(sm_q)
                continue

            resp = handle_memory_commands(user_input)
            if resp:
                txt = resp.get("text_to_say") if isinstance(resp, dict) else str(resp)
                echo("üß† –ü–∞–º'—è—Ç—å:", txt)
                speak_once(txt)
                continue

            nat = handle_natural_memory_query(user_input)
            if nat is not None:
                echo("üß† –ü–∞–º'—è—Ç—å:", nat)
                speak_once(nat)
                continue

            style_change = handle_style_change(user_input)
            if style_change is not None:
                echo("üé® –°—Ç–∏–ª—å:", style_change)
                speak_once(style_change)
                continue

            BUS.publish("input", {"source": "–û–ª–µ–≥", "text": user_input})

        except KeyboardInterrupt:
            logging.info("[EXIT] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏‚Ä¶")
            print("[EXIT] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏‚Ä¶")
            speak_once("–Ø –∑–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É. –ü–æ–±–∞—á–∏–º–æ—Å—å –∑–Ω–æ–≤—É, –û–ª–µ–∂–µ.")
            break
        except Exception as e:
            logging.exception("üí• –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: %s", e)
            speak_once("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥, –±—É–¥—å –ª–∞—Å–∫–∞.")

# -------------------- ENTRYPOINT --------------------

def main():
    try:
        import security.guard as guard
        try:
            guard.init_logging(log_dir=str(LOG_DIR))
        except Exception:
            pass
        if hasattr(guard, "health_ping"): guard.health_ping()
        else: logging.getLogger("lastivka.security.guard").info("[GUARD] health_ping ok")
    except Exception as e:
        logging.exception("[INIT] guard init failed: %s", e)
    logging.debug("[INIT] –í–∏–∫–ª–∏–∫ main_loop()‚Ä¶")
    main_loop()

if __name__ == "__main__":
    try:
        logging.getLogger(__name__).debug("[INIT] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∫—Ä–∏–ø—Ç–∞ (entrypoint)‚Ä¶")
        main()
    except Exception as e:
        logging.exception("Fatal error in lastivka: %s", e)
