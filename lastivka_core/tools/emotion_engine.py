# tools/emotion_engine.py
import json
from pathlib import Path

EMOTION_CONFIG_PATH = Path(__file__).resolve().parent.parent / "config" / "emotion_config.json"

# –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –µ–º–æ—Ü—ñ—ó (–¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ set_emotion)
_current = {
    "emotion": "—Å–ø–æ–∫—ñ–π",
    "reaction": "",
    "speed": 170,
    "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π",
    "intensity": "medium"
}

def _load_cfg():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥ –µ–º–æ—Ü—ñ–π. –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥–≤—ñ —Å—Ö–µ–º–∏:
       1) {"emotions": {...}, "speed": {...}}
       2) {...–µ–º–æ—Ü—ñ—ó –≤ –∫–æ—Ä–µ–Ω—ñ..., "speed": {...}}"""
    with open(EMOTION_CONFIG_PATH, "r", encoding="utf-8") as f:
        cfg = json.load(f)

    # –ï–º–æ—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤ –∫–æ—Ä–µ–Ω—ñ –∞–±–æ –ø—ñ–¥ –∫–ª—é—á–µ–º "emotions"
    raw_emotions = cfg.get("emotions", cfg)
    speeds = cfg.get("speed", {})
    default_speed = speeds.get("default", 170)

    # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∫–ª—é—á—ñ –µ–º–æ—Ü—ñ–π –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    emotions = {}
    for k, v in raw_emotions.items():
        if isinstance(v, dict):
            emotions[k.lower()] = v

    return emotions, speeds, default_speed


class EmotionEngine:
    """–°—É–º—ñ—Å–Ω–∏–π –∫–ª–∞—Å: detect_emotion(message) –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –ø–æ–ª—è–º–∏:
       emotion, reaction, speed, tone, intensity."""
    def __init__(self, config_path: Path = None):
        global EMOTION_CONFIG_PATH
        if config_path is not None:
            EMOTION_CONFIG_PATH = Path(config_path)
        self._emotions, self._speeds, self._default_speed = _load_cfg()

    def detect_emotion(self, message: str):
        detected = {
            "emotion": None,
            "reaction": None,
            "speed": self._default_speed,
            "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π",
            "intensity": "medium"
        }
        if not message:
            return detected

        msg = message.lower()
        for name_lc, props in self._emotions.items():
            triggers = props.get("triggers", [])
            for trig in triggers:
                if isinstance(trig, str) and trig.lower() in msg:
                    # –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ ¬´–ª—é–¥—Å—å–∫—É¬ª –Ω–∞–∑–≤—É (–º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è —Ä–µ–≥—ñ—Å—Ç—Ä–æ–º)
                    name = name_lc
                    return {
                        "emotion": name,
                        "reaction": props.get("reaction", ""),
                        "speed": self._speeds.get(name, self._speeds.get(name_lc, self._default_speed)),
                        "tone": props.get("tone", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"),
                        "intensity": props.get("intensity", "medium")
                    }
        return detected


# --- –ì–ª–æ–±–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ –∑ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤ (file_watcher —Ç–æ—â–æ) ---

def set_emotion(name: str):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω –∑–∞ –Ω–∞–∑–≤–æ—é (–Ω–µ—á—É—Ç–ª–∏–≤–∞ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)."""
    global _current
    if not name:
        return
    try:
        emotions, speeds, default_speed = _load_cfg()
        key = name.lower()
        props = emotions.get(key)
        if not props:
            print(f"‚ùå –ï–º–æ—Ü—ñ—è '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(emotions.keys())}")
            return
        _current = {
            "emotion": name,
            "reaction": props.get("reaction", ""),
            "speed": speeds.get(name, speeds.get(key, default_speed)),
            "tone": props.get("tone", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"),
            "intensity": props.get("intensity", "medium")
        }
        print(f"üí´ –ï–º–æ—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞: {name} ({_current['tone']})")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –µ–º–æ—Ü—ñ—ó: {e}")

def get_emotion():
    return _current

def list_emotions():
    try:
        emotions, _, _ = _load_cfg()
        return list(emotions.keys())
    except Exception:
        return []
