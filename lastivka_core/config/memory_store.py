import json
from pathlib import Path
from datetime import datetime, timedelta

MEMORY_FILE = Path(__file__).resolve().parent.parent / "config" / "memory_store.json"

def load_memory():
    if not MEMORY_FILE.exists():
        default_memory = {"thoughts": [], "triggers": {}}
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(default_memory, f, ensure_ascii=False, indent=2)
        return default_memory
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                raise json.JSONDecodeError("JSON –Ω–µ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º", doc=str(data), pos=0)
            return data
    except json.JSONDecodeError as e:
        raise e

def save_memory(memory):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)

# üß† –ó–∞–ø–∏—Å –¥—É–º–∫–∏ (—É —Å–ø–∏—Å–æ–∫ thoughts)
def log_thought(thought):
    memory = load_memory()
    record = {
        "ts": datetime.now().isoformat(),
        "text": thought
    }
    memory.setdefault("thoughts", []).append(record)
    save_memory(memory)

# üîÅ –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—é –¥—É–º–∫—É
def recall_memory():
    memory = load_memory()
    thoughts = memory.get("thoughts", [])
    if thoughts:
        return thoughts[-1].get("text", "")
    return None

# üîç –ü–æ—à—É–∫ –ø–æ –≤—Å—ñ—Ö —Å–µ–∫—Ü—ñ—è—Ö
def search_memories(text):
    memory = load_memory()
    text = text.lower()
    results = []
    for section in memory:
        entries = memory.get(section, [])
        if isinstance(entries, dict):
            entries = [entries]
        for entry in entries:
            if isinstance(entry, dict):
                value = str(entry.get("text") or entry.get("value") or "")
                if text in value.lower():
                    results.append(f"[{section}] {value}")
    return "\n".join(results) if results else "üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

# üìã –ü—ñ–¥—Å—É–º–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
def summarize_memories():
    memory = load_memory()
    summary = {}
    for key in memory:
        count = len(memory[key]) if isinstance(memory[key], list) else 1
        summary[key] = count
    lines = [f"{section.capitalize()}: {count}" for section, count in summary.items()]
    return "üìä –ü—ñ–¥—Å—É–º–æ–∫ –ø–∞–º º—è—Ç—ñ:\n" + "\n".join(lines) if lines else "üë≠ –ü–∞–º º—è—Ç—å –ø–æ—Ä–æ–∂–Ω—è."

# ‚ùì –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —â–æ—Å—å –ø–æ –ø–∏—Ç–∞–Ω–Ω—é
def recall_from_question(question):
    def normalize(word):
        word = word.lower()
        for ending in ["—É", "—é", "–µ", "–∞", "–æ", "—ñ", "–∏", "—å"]:
            if word.endswith(ending):
                word = word[:-1]
        return word

    q = normalize(question)
    memory = load_memory()
    found = []

    for section, entries in memory.items():
        if isinstance(entries, dict):
            entries = [entries]
        for entry in entries:
            value = str(entry.get("text") or entry.get("value") or "")
            if q in normalize(value):
                found.append(f"[{section}] {value}")
    return "\n".join(found) if found else "üîç –Ø –Ω–µ –∑–Ω–∞–π—à–ª–∞ –Ω—ñ—á–æ–≥–æ –≤ –ø–∞–º º—è—Ç—ñ, —â–æ —Å—Ç–æ—Å—É–≤–∞–ª–æ—Å—è –± —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è."

# üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–º–æ–∫ —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ N –¥–Ω—ñ–≤
def purge_old_thoughts(days=30):
    memory = load_memory()
    thoughts = memory.get("thoughts", [])
    threshold = datetime.now() - timedelta(days=days)
    filtered = []

    for entry in thoughts:
        try:
            ts = datetime.fromisoformat(entry.get("ts", ""))
            if ts >= threshold:
                filtered.append(entry)
        except Exception:
            continue

    if len(filtered) != len(thoughts):
        memory["thoughts"] = filtered
        save_memory(memory)
        return f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ {len(thoughts) - len(filtered)} —Å—Ç–∞—Ä–∏—Ö –¥—É–º–æ–∫."
    return "‚úÖ –î—É–º–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ."

# üö® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–∏ —É –≤–≤–µ–¥–µ–Ω–Ω—ñ
def check_triggers(input_text):
    memory = load_memory()
    triggers = memory.get("triggers", {})
    for key, response in triggers.items():
        if key.lower() in input_text.lower():
            return response
    return None
