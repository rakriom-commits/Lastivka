from __future__ import annotations
from pathlib import Path
from datetime import datetime
from typing import Callable, Dict, Any

# === –£—Ç–∏–ª—ñ—Ç–∏ ===

def _show_log_tail(log_file: Path, say: Callable[[str], None], n: int = 20) -> None:
    try:
        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()[-n:]
        print("\n".join(line.rstrip("\n") for line in lines))
    except Exception as e:
        say(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ª–æ–≥: {e}")

def _status_text(CFG, tts_backend_module: str, LOG_FILE: Path, CONFIG_DIR: Path) -> str:
    return "\n".join([
        f"üë§ –Ü–º'—è: {CFG.name}",
        f"üîà –ó–≤—É–∫: {'–≤–∏–º–∫–Ω–µ–Ω–æ' if CFG.mute else '—É–≤—ñ–º–∫–Ω–µ–Ω–æ'}",
        f"üß† –ï–º–æ—Ü—ñ–π–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥: {'—î' if (CONFIG_DIR/'emotion_config.json').exists() else '–Ω–µ–º–∞'}",
        f"üó£Ô∏è TTS backend: {tts_backend_module}",
        f"üóÇÔ∏è –õ–æ–≥: {LOG_FILE}"
    ])

# === –ö–æ–º–∞–Ω–¥–∏ ===

def _cmd_mute_on(CFG, say, *_):
    CFG.mute = True
    say("üîï –ó–≤—É–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")

def _cmd_mute_off(CFG, say, *_):
    CFG.mute = False
    say("üîî –ó–≤—É–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")

def _cmd_log(CFG, say, LOG_FILE: Path, *_):
    say(f"–ü–æ–∫–∞–∑—É—é –æ—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤ –ª–æ–≥—É: {LOG_FILE.name}")
    _show_log_tail(LOG_FILE, say)

def _cmd_status(CFG, say, LOG_FILE: Path, CONFIG_DIR: Path):
    try:
        tts_backend = say.__module__
    except Exception:
        tts_backend = "unknown"
    say("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏.")
    print(_status_text(CFG, tts_backend, LOG_FILE, CONFIG_DIR))

def _cmd_exit(*_):
    raise SystemExit(0)

def _cmd_cover_on(CFG, say, *_):
    CFG.name = CFG.alt_name
    say(f"üõ°Ô∏è –ó–º—ñ–Ω–µ–Ω–æ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å. –¢–µ–ø–µ—Ä —è ‚Äî {CFG.alt_name}.")

def _cmd_time(CFG, say, *_):
    say(f"–ó–∞—Ä–∞–∑ {datetime.now().strftime('%H:%M:%S')}.")

def _cmd_date(CFG, say, *_):
    say(f"–°—å–æ–≥–æ–¥–Ω—ñ {datetime.now().strftime('%d.%m.%Y')}.")

def _cmd_help(CFG, say, *_):
    say("–ú–æ–∂—É: —Å–∫–∞–∑–∞—Ç–∏ —á–∞—Å, –¥–∞—Ç—É, —Å—Ç–∞—Ç—É—Å, –∫–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—É–∫–æ–º, –ø–∞–º'—è—Ç–∞—Ç–∏ —ñ –ø—Ä–∏–≥–∞–¥–∞—Ç–∏.")

def _cmd_weather_stub(CFG, say, *_):
    say("–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –æ—Ñ–ª–∞–π–Ω. –ú–æ–∂—É —Å–∫–∞–∑–∞—Ç–∏ —á–∞—Å —ñ –¥–∞—Ç—É.")

COMMANDS: Dict[str, Callable[[Any, Callable[[str], None], Path, Path], None]] = {
    "–±–µ–∑ –∑–≤—É–∫—É": _cmd_mute_on,
    "mute": _cmd_mute_on,
    "–ø–æ–≤–µ—Ä–Ω–∏ –∑–≤—É–∫": _cmd_mute_off,
    "–∑–≤—É–∫": _cmd_mute_off,
    "unmute": _cmd_mute_off,
    "–ª–æ–≥": _cmd_log,
    "–∂—É—Ä–Ω–∞–ª": _cmd_log,
    "—Å—Ç–∞–Ω": _cmd_status,
    "–≤–∏–π—Ç–∏": _cmd_exit,
    "–≤–≤—ñ–º–∫–Ω–∏ –ø—Ä–∏–∫—Ä–∏—Ç—Ç—è": _cmd_cover_on,
    "—á–∞—Å": _cmd_time,
    "–¥–∞—Ç–∞": _cmd_date,
    "–¥–æ–ø–æ–º–æ–≥–∞": _cmd_help,
    "–ø–æ–≥–æ–¥–∞": _cmd_weather_stub,
}

# === –Ü–Ω—Ç–µ–Ω—Ç–∏ –≤–∏—Å–æ–∫–æ–≥–æ —Ä—ñ–≤–Ω—è ===

def handle_intents(user_input: str,
                   CFG,
                   say: Callable[[str], None],
                   CORE_IDENTITY: dict,
                   recall_memory: Callable[[], str | None],
                   remember_memory: Callable[[str], None]) -> bool:
    text = user_input.lower()

    if CFG.activation and user_input.strip() == CFG.activation:
        CFG.name = CORE_IDENTITY.get("–Ü–º'—è", "–°–æ—Ñ—ñ—è")
        say("‚ö°Ô∏è –Ø–¥—Ä–æ –°–æ—Ñ—ñ—ó Œ© –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
        return True

    if user_input.startswith("–∑–∞–ø–∞–º'—è—Ç–∞–π:"):
        thought = user_input.replace("–∑–∞–ø–∞–º'—è—Ç–∞–π:", "").strip()
        remember_memory(thought)
        say("–Ø –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ —Ü–µ.")
        return True

    if "—â–æ —è —Ç–æ–±—ñ –∫–∞–∑–∞–≤" in text:
        memory = recall_memory()
        say(memory if memory else "–£ –ø–∞–º º—è—Ç—ñ –ø–æ–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î.")
        return True

    return False
