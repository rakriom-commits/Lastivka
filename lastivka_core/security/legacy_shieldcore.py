import time
import threading
import json
import random
from pathlib import Path
from tools.watchdog import verify_core_integrity, backup_core, log_shield_event
from tools.config_loader import load_json_config
from tools.shadow_shell import trigger_shell, is_locked

# üìÇ –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
CORE_FILES = [
    Path("config/core_identity.json"),
    Path("config/moral_compass.json"),
    Path("config/emotion_config.json"),
    Path("config/self_awareness_config.json"),
    Path("main/lastivka.py"),
    Path("main/shieldcore.py"),
]

CHECK_INTERVAL = 30  # ‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö —Ö–µ—à—ñ–≤
def load_reference_hashes():
    try:
        with open("config/core_hash_reference.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log_shield_event(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ core_hash_reference.json: {e}")
        return {}

# üõ° –ö–ª–∞—Å ShadowShell ‚Äî –∞–∫—Ç–∏–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —è–¥—Ä–∞
class ShadowShell:
    def __init__(self):
        self.ref_hashes = load_reference_hashes()
        self.running = False

    def monitor_core(self):
        while self.running:
            tampered = verify_core_integrity(self.ref_hashes, CORE_FILES)
            if tampered:
                log_shield_event(f"ShadowShell: –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω—É –∞–±–æ –≤—Ç—Ä–∞—Ç—É —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ: {tampered}")
                backup_core()
                self.activate_shield()
            time.sleep(CHECK_INTERVAL)

    def activate_shield(self):
        log_shield_event("ShadowShell: –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (lockdown).")
        force_lockdown()

    def start(self):
        self.running = True
        thread = threading.Thread(target=self.monitor_core, daemon=True)
        thread.start()
        print("üõ° ShadowShell Protocol –∑–∞–ø—É—â–µ–Ω–æ.")

    def stop(self):
        self.running = False
        print("üõë ShadowShell Protocol –∑—É–ø–∏–Ω–µ–Ω–æ.")

# üß† –†–µ–∞–∫—Ü—ñ—ó –∑ —à–∞–±–ª–æ–Ω—ñ–≤
reaction_templates = load_json_config("config/reaction_templates.json")

def respond_from_template(key: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É —Ä–µ–∞–∫—Ü—ñ—é –∑–∞ –∫–ª—é—á–µ–º –∑ —à–∞–±–ª–æ–Ω—ñ–≤."""
    return random.choice(reaction_templates.get(key, ["[!] –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."]))

# üîê –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –∑–∞—Ö–∏—Å—Ç—É
def run_shield_protocol():
    if is_locked():
        print(respond_from_template("intrusion_detected"))
        trigger_shell()
    else:
        print(respond_from_template("unlock_granted"))

# üö® –ü—Ä–∏–º—É—Å–æ–≤–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
def force_lockdown():
    print(respond_from_template("locked_mode_active"))
    trigger_shell()

# üß™ –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É ‚Äî –≤–∏–∫–ª–∏–∫ run_shield_protocol
if __name__ == "__main__":
    run_shield_protocol()
