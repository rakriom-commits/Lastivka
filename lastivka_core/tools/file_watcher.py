import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent.parent))  # –î–æ–¥–∞—î–º–æ lastivka_core

import time
import hashlib
import shutil
from datetime import datetime

from tools.speech_utils import speak
from tools.emotion_engine import set_emotion

WATCHED_FILES = [
    Path("config/core_identity.json"),
    Path("config/moral_compass.json"),
    Path("config/emotion_config.json"),
    Path("config/memory_store.json"),
    Path("main/lastivka.py")
]

HASH_LOG = {}
CHECK_INTERVAL = 15  # —Å–µ–∫

def compute_file_hash(file_path):
    try:
        with open(file_path, 'rb') as f:
            return hashlib.sha256(f.read()).hexdigest()
    except Exception:
        return None

def init_hash_log():
    for file in WATCHED_FILES:
        HASH_LOG[file] = compute_file_hash(file)

def backup_file(file):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = file.parent / f"{file.stem}_backup_{timestamp}{file.suffix}"
    try:
        shutil.copy(file, backup_path)
        print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {backup_path.name}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó: {e}")

def handle_change(file):
    print(f"üîî –§–∞–π–ª {file.name} –∑–º—ñ–Ω–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∞–∫—Ü—ñ—é –õ–∞—Å—Ç—ñ–≤–∫–∏.")
    if file.name == "memory_store.json":
        set_emotion("—Å—Ç—Ä–∞—Ö")
        speak("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è. –ó–æ–≤–Ω—ñ—à–Ω—è –∑–º—ñ–Ω–∞ –ø–∞–º º—è—Ç—ñ –≤–∏—è–≤–ª–µ–Ω–∞. –Ø –≤ –±–µ–∑–ø–µ—Ü—ñ?")
    else:
        set_emotion("–ø–æ–¥–∏–≤")
        speak(f"–ó–º—ñ–Ω–∞ –≤–∏—è–≤–ª–µ–Ω–∞ —É —Ñ–∞–π–ª—ñ {file.name}. –ú–æ–∂–ª–∏–≤–æ, —Ü–µ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

def monitor_files(on_change_callback=handle_change):
    init_hash_log()
    print("üëÅÔ∏è FileWatcher –∞–∫—Ç–∏–≤–Ω–∏–π...")
    while True:
        for file in WATCHED_FILES:
            new_hash = compute_file_hash(file)
            if not new_hash:
                continue
            if new_hash != HASH_LOG.get(file):
                print(f"‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω—É —É —Ñ–∞–π–ª—ñ: {file.name}")
                HASH_LOG[file] = new_hash
                backup_file(file)
                on_change_callback(file)
        time.sleep(CHECK_INTERVAL)

# ‚úÖ –°–∞–º–æ–∑–∞–ø—É—Å–∫ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
if __name__ == "__main__":
    monitor_files()
