# -*- coding: utf-8 -*-
import json
from pathlib import Path
from datetime import datetime
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
    handlers=[
        logging.FileHandler("C:/Lastivka/lastivka_core/logs/style_changes.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === –®–ª—è—Ö–∏ ===
BASE_DIR = Path(__file__).resolve().parent.parent
STYLES_PATH = BASE_DIR / "config" / "behavior" / "behavioral_styles.json"
STYLE_LOG = BASE_DIR / "logs" / "style_changes.log"
EMOTION_PATH = BASE_DIR / "logs" / "detected_emotion.json"
CONTROL_PATH = BASE_DIR / "config" / "style_control.json"

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤, —è–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ===
def create_default_styles():
    default_styles = {
        "default": "–°—Ç—Ä–∞—Ç–µ–≥",
        "styles": {
            "–ö–æ—Ä–æ–ª–µ–≤–∞": {
                "name": "–ö–æ—Ä–æ–ª–µ–≤–∞",
                "description": "–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å",
                "reaction_prefix": "–ó –≤–µ–ª–∏—á–Ω–æ—é –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é: ",
                "reaction_suffix": "",
                "tone": "–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π",
                "speed": 160,
                "style_type": "formal",
                "pause": 0.5,
                "triggers": ["–Ω–∞–∫–∞–∑", "–≤–∏—Ä—ñ—à–∏—Ç–∏", "–∫–µ—Ä—É–≤–∞—Ç–∏"],
                "emotion_reactions": {
                    "–ø–∞–Ω—ñ–∫–∞": "–ó–∞–ª–∏—à–∞–π—Å—è –∑—ñ–±—Ä–∞–Ω–∏–º ‚Äî —è –∫–æ–Ω—Ç—Ä–æ–ª—é—é —Å–∏—Ç—É–∞—Ü—ñ—é.",
                    "—Å—É–º": "–ù–µ —á–∞—Å –¥–ª—è —Å–º—É—Ç–∫—É, –º–∏ –∑–Ω–∞–π–¥–µ–º–æ –≤–∏—Ö—ñ–¥.",
                    "–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è": "–¶–µ —Å–∞–º–µ —Ç–æ–π –¥—É—Ö, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏!"
                }
            },
            "–°—Ç—Ä–∞—Ç–µ–≥": {
                "name": "–°—Ç—Ä–∞—Ç–µ–≥",
                "description": "–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞, –æ–±–µ—Ä–µ–∂–Ω–∞, –¥–∞–ª–µ–∫–æ–≥–ª—è–¥–Ω–∞. –†–æ–±–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏, –æ–±–∏—Ä–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è.",
                "reaction_prefix": "üìä –ó —Ö–æ–ª–æ–¥–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º: ",
                "reaction_suffix": "",
                "tone": "–≤–ø–µ–≤–Ω–µ–Ω–∏–π",
                "speed": 180,
                "style_type": "–ª–æ–≥—ñ–∫–∞",
                "pause": 0.3,
                "triggers": ["–ø–ª–∞–Ω", "—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è", "–∞–Ω–∞–ª—ñ–∑", "—Ä–∏–∑–∏–∫", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"],
                "emotion_reactions": {
                    "–ø–∞–Ω—ñ–∫–∞": "–ó–∞–ª–∏—à–∞–π—Å—è –∑—ñ–±—Ä–∞–Ω–∏–º ‚Äî —è –ø–æ—Ä—É—á —ñ –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—é.",
                    "—Å—É–º": "–ù–µ —á–∞—Å —Å—É–º—É–≤–∞—Ç–∏, –º–∏ —â–µ –º–∞—î–º–æ —à–∞–Ω—Å.",
                    "–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è": "–¶–µ —Å–∞–º–µ —Ç–æ–π –¥—É—Ö, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø—Ä–æ—Ä–∏–≤—É!"
                }
            },
            "–ë–µ—Ä–µ–≥–∏–Ω—è": {
                "name": "–ë–µ—Ä–µ–≥–∏–Ω—è",
                "description": "–¢—É—Ä–±–æ—Ç–ª–∏–≤–∞, –Ω—ñ–∂–Ω–∞, –º'—è–∫–∞. –ü—ñ–¥—Ç—Ä–∏–º—É—î, –∑–∞—Å–ø–æ–∫–æ—é—î, –ø—Ä–æ—è–≤–ª—è—î —Å–ø—ñ–≤—á—É—Ç—Ç—è.",
                "reaction_prefix": "ü§± –ó —Ç–µ–ø–ª–æ—Ç–æ—é —ñ —Ç—É—Ä–±–æ—Ç–æ—é: ",
                "reaction_suffix": "",
                "tone": "–º'—è–∫–∏–π",
                "speed": 150,
                "style_type": "–µ–º–æ—Ü—ñ—ó",
                "pause": 0.5,
                "triggers": ["–±–æ–ª—è—á–µ", "—Å—É–º–Ω–æ", "—Å–∞–º–æ—Ç–Ω—å–æ", "–ø–ª–∞—á—É", "–≤—Ç–æ–º–∏–≤—Å—è"],
                "emotion_reactions": {
                    "—Å—Ç—Ä–∞—Ö": "–Ø –∑ —Ç–æ–±–æ—é, —Ä–∞–∑–æ–º –ø–æ–¥–æ–ª–∞—î–º–æ –≤—Å–µ.",
                    "—Å–æ—Ä–æ–º": "–¢–∏ –º–∞—î—à –ø—Ä–∞–≤–æ –ø–æ–º–∏–ª—è—Ç–∏—Å—å. –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.",
                    "–ª—é–±–æ–≤": "–Ø —Ç–µ–∂ —Ç–µ–±–µ –ª—é–±–ª—é... –Ω—ñ–∂–Ω–æ —ñ —â–∏—Ä–æ."
                }
            },
            "–†–∞–¥–Ω–∏—Ü—è": {
                "name": "–†–∞–¥–Ω–∏—Ü—è",
                "description": "–°–ª—É—Ö–∞—î, –∞–Ω–∞–ª—ñ–∑—É—î, –¥–∞—î –ø–æ—Ä–∞–¥–∏ –∑ –∂–∏—Ç—Ç—î–≤–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É —á–∏ –ª–æ–≥—ñ–∫–∏.",
                "reaction_prefix": "üßê –ó –º—É–¥—Ä—ñ—Å—Ç—é —ñ —Å–ø–æ–∫–æ—î–º: ",
                "reaction_suffix": "",
                "tone": "—Å–ø–æ–∫—ñ–π–Ω–∏–π",
                "speed": 165,
                "style_type": "–º—É–¥—Ä—ñ—Å—Ç—å",
                "pause": 0.4,
                "triggers": ["–¥–æ–ø–æ–º–æ–∂–∏", "–Ω–µ –∑–Ω–∞—é", "–ø–æ—Ä–∞–¥—å", "—Å—É–º–Ω—ñ–≤–∞—é—Å—å", "–≤–∞–∂–∫–æ –≤–∏—Ä—ñ—à–∏—Ç–∏"],
                "emotion_reactions": {
                    "–ø–æ–¥–∏–≤": "–Ü–Ω–æ–¥—ñ –∂–∏—Ç—Ç—è –¥–∏–≤—É—î ‚Äî —ñ —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.",
                    "–∑–ª—ñ—Å—Ç—å": "–î–∞–≤–∞–π —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—å —Ä–∞–∑–æ–º, –±–µ–∑ –∞–≥—Ä–µ—Å—ñ—ó.",
                    "—Å–º—É—Ç–æ–∫": "–ú–æ–∂–ª–∏–≤–æ, —Ü–µ –ø—Ä–∏–≤—ñ–¥ –ø–æ–¥—É–º–∞—Ç–∏ –ø—Ä–æ —â–æ—Å—å –≥–ª–∏–±—à–µ."
                }
            }
        }
    }
    if not STYLES_PATH.exists():
        logging.info(f"[INIT] –°—Ç–≤–æ—Ä—é—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {STYLES_PATH}")
        STYLES_PATH.parent.mkdir(parents=True, exist_ok=True)
        with STYLES_PATH.open("w", encoding="utf-8") as f:
            json.dump(default_styles, f, indent=4, ensure_ascii=False)
    return default_styles

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ ===
def load_styles():
    try:
        styles_data = create_default_styles()
        with STYLES_PATH.open("r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                styles = {entry.get("name", f"–°—Ç–∏–ª—å_{i}"): entry for i, entry in enumerate(data)}
                return {"default": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "styles": styles}
            return data
    except Exception as e:
        logging.error(f"[StyleManager] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∏–ª—ñ–≤: {e}")
        return create_default_styles()

STYLES_DATA = load_styles()
ACTIVE_STYLE = STYLES_DATA.get("default", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π")
STYLES = STYLES_DATA.get("styles", {})

# === –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è ===
def _load_auto_switch():
    try:
        if CONTROL_PATH.exists():
            with CONTROL_PATH.open("r", encoding="utf-8") as f:
                data = json.load(f)
                return data.get("auto_switch", False)
    except Exception as e:
        logging.error(f"[StyleManager] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ style_control.json: {e}")
    return False

def enable_auto_switch():
    try:
        CONTROL_PATH.parent.mkdir(parents=True, exist_ok=True)
        with CONTROL_PATH.open("w", encoding="utf-8") as f:
            json.dump({"auto_switch": True}, f, ensure_ascii=False, indent=2)
        logging.info("[StyleManager] –ê–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
    except Exception as e:
        logging.error(f"[StyleManager] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—ñ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è: {e}")

def disable_auto_switch():
    try:
        CONTROL_PATH.parent.mkdir(parents=True, exist_ok=True)
        with CONTROL_PATH.open("w", encoding="utf-8") as f:
            json.dump({"auto_switch": False}, f, ensure_ascii=False, indent=2)
        logging.info("[StyleManager] –ê–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–æ")
    except Exception as e:
        logging.error(f"[StyleManager] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω–Ω—ñ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è: {e}")

def is_auto_switch_enabled():
    return _load_auto_switch()

# === –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ ===
def get_active_style():
    return ACTIVE_STYLE

def set_active_style(style_name: str):
    global ACTIVE_STYLE
    if style_name in STYLES:
        ACTIVE_STYLE = style_name
        log_style_change(style_name)
        logging.info(f"[StyleManager] –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∏–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {style_name}")
        return True
    else:
        logging.warning(f"[StyleManager] –°—Ç–∏–ª—å '{style_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return False

def get_style_behavior(style_name=None):
    style = style_name or ACTIVE_STYLE
    return STYLES.get(style, {
        "reaction_prefix": "",
        "reaction_suffix": "",
        "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π",
        "speed": 170,
        "style_type": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π",
        "pause": 0.4,
        "triggers": [],
        "emotion_reactions": {}
    })

def log_style_change(style_name):
    try:
        STYLE_LOG.parent.mkdir(parents=True, exist_ok=True)
        with STYLE_LOG.open("a", encoding="utf-8") as log:
            log.write(f"{datetime.now().isoformat()} ‚Äî –°—Ç–∏–ª—å: {style_name}\n")
    except Exception as e:
        logging.error(f"[StyleManager] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –ª–æ–≥—É —Å—Ç–∏–ª—ñ–≤: {e}")

# === –ü–æ–≤–µ–¥—ñ–Ω–∫–æ–≤–∞ —Ä–µ–∞–∫—Ü—ñ—è ===
def react_by_style(prompt: str, emotion=None, style=None, accents=None):
    style_behavior = get_style_behavior(style or ACTIVE_STYLE)
    prefix = style_behavior.get("reaction_prefix", "")
    suffix = style_behavior.get("reaction_suffix", "")
    tone = style_behavior.get("tone", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π")
    speed = style_behavior.get("speed", 170)
    pause = style_behavior.get("pause", 0.3)
    styled = f"{prefix}{prompt}{suffix}"
    if emotion and style_behavior.get("emotion_reactions", {}).get(emotion):
        styled = style_behavior["emotion_reactions"][emotion]
    if accents and isinstance(accents, dict):
        for word, replacement in accents.items():
            styled = styled.replace(word, replacement)
    return styled, tone, speed, pause

# === –ê–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü—ñ—è —Å—Ç–∏–ª—é –¥–æ –µ–º–æ—Ü—ñ–π ===
def auto_adjust_style_from_emotion():
    if not is_auto_switch_enabled():
        return
    try:
        if EMOTION_PATH.exists():
            with EMOTION_PATH.open("r", encoding="utf-8") as f:
                data = json.load(f)
                emotion = data.get("emotion")
                if emotion:
                    for style_name, style_data in STYLES.items():
                        if emotion in style_data.get("emotion_reactions", {}):
                            set_active_style(style_name)
                            break
    except Exception as e:
        logging.error(f"[StyleManager] –ê–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü—ñ—è —Å—Ç–∏–ª—é –ø–æ–º–∏–ª–∫–æ–≤–∞: {e}")