import time
import threading
import json
import random
from pathlib import Path
from tools.watchdog import verify_core_integrity, backup_core, log_shield_event
from tools.config_loader import load_json_config
from tools.shadow_shell import trigger_shell, is_locked

# üîê –ö–ª—é—á–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
CORE_FILES = [
    Path("config/core_identity.json"),
    Path("config/moral_compass.json"),
    Path("config/emotion_config.json"),
    Path("config/self_awareness_config.json"),
    Path("main/lastivka.py"),
    Path("main/shieldcore.py"),
]

CHECK_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥

# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∏—Ö —Ö–µ—à—ñ–≤
def load_reference_hashes():
    try:
        with open("config/core_hash_reference.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log_shield_event(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ö–µ—à—ñ–≤: {e}")
        return {}

# üõ°Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –∑–∞—Ö–∏—Å—Ç—É
class ShadowShell:
    def __init__(self):
        self.ref_hashes = load_reference_hashes()
        self.running = False

    def monitor_core(self):
        while self.running:
            tampered = verify_core_integrity(self.ref_hashes, CORE_FILES)
            if tampered:
                log_shield_event(f"ShadowShell: –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è —É {tampered}")
                backup_core()
                self.activate_shield()
            time.sleep(CHECK_INTERVAL)

    def activate_shield(self):
        log_shield_event("ShadowShell: –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∑–∞—Ö–∏—Å–Ω–∏–π —Ä–µ–∂–∏–º (–ó–∞–≤—ñ—Å–∞)")
        force_lockdown()

    def start(self):
        self.running = True
        thread = threading.Thread(target=self.monitor_core, daemon=True)
        thread.start()
        print("üõ°Ô∏è ShadowShell Protocol –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")

    def stop(self):
        self.running = False
        print("üõë ShadowShell Protocol –∑—É–ø–∏–Ω–µ–Ω–æ.")

# üé≠ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∞–∫—Ü—ñ–π
reaction_templates = load_json_config("config/reaction_templates.json")

def respond_from_template(key: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É —Ä–µ–∞–∫—Ü—ñ—é –∑–∞ –∫–ª—é—á–µ–º —à–∞–±–ª–æ–Ω—É."""
    return random.choice(reaction_templates.get(key, ["[!] –ù–µ–º–∞—î —Ä–µ–∞–∫—Ü—ñ—ó."]))

def run_shield_protocol():
    """–ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –±–µ–∑–ø–µ–∫–∏ –∑ —Ä–µ–∞–∫—Ü—ñ—è–º–∏."""
    if is_locked():
        print(respond_from_template("intrusion_detected"))
        trigger_shell()
    else:
        print(respond_from_template("unlock_granted"))

def force_lockdown():
    """–ü—Ä–∏–º—É—Å–æ–≤–æ –±–ª–æ–∫—É—î —Å–∏—Å—Ç–µ–º—É –∑ —à–∞–±–ª–æ–Ω–æ–º —Ä–µ–∞–∫—Ü—ñ—ó."""
    print(respond_from_template("locked_mode_active"))
    trigger_shell()

# üß™ –¢–µ—Å—Ç
if __name__ == "__main__":
    run_shield_protocol()
