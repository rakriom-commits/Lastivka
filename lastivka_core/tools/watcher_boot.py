# config/watcher_boot.py
import sys
import threading
import time
import json
from pathlib import Path
from importlib import import_module

# === –ö–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É –≤ sys.path ===
# this file is at: lastivka_core/config/watcher_boot.py
BASE_DIR = Path(__file__).resolve().parents[1]  # C:\Lastivka\lastivka_core
sys.path.append(str(BASE_DIR))

# === –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–≤–ª–µ–Ω–Ω—è/–µ–º–æ—Ü—ñ–π (–Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω—ñ) ===
try:
    from tools.speech_utils import speak
except Exception:
    def speak(*args, **kwargs):  # –º º—è–∫–∏–π –∑–∞–≥–ª—É—à—É–≤–∞—á
        pass

try:
    from tools.emotion_engine import set_emotion, get_emotion
except Exception:
    def set_emotion(*args, **kwargs):
        pass
    def get_emotion():
        return {"emotion": "—Å–ø–æ–∫—ñ–π"}

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è monitor_files –∑ config –∞–±–æ tools ===
def _load_monitor():
    for modpath in ("config.file_watcher", "tools.file_watcher"):
        try:
            mod = import_module(modpath)
            if hasattr(mod, "monitor_files"):
                return mod.monitor_files
        except Exception:
            continue
    raise ImportError("monitor_files not found in config.file_watcher or tools.file_watcher")

monitor_files = _load_monitor()

# === –õ–æ–≥–∏ ===
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True, parents=True)
SECURITY_LOG = LOGS_DIR / "security_events.json"

def _append_json(path: Path, payload):
    try:
        if path.exists():
            data = json.loads(path.read_text(encoding="utf-8") or "[]")
            if not isinstance(data, list):
                data = []
        else:
            data = []
        data.append(payload)
        path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        # –ª–æ–≥ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∏–π ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        pass

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å ===
MIN_INTERVAL_SEC = 30      # —Ç—Ä–æ—Ç–ª—ñ–Ω–≥
AUTO_RESET_SEC = 60        # –∞–≤—Ç–æ-—Å–∫–∏–¥–∞–Ω–Ω—è –µ–º–æ—Ü—ñ–π
VOICE_ALERTS_ENABLED = False  # üîá –≥–æ–ª–æ—Å–æ–≤—ñ –∞–ª–µ—Ä—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ

# –§–∞–π–ª–∏, —è–∫—ñ —ñ–≥–Ω–æ—Ä—É—î–º–æ (—Å–ª—É–∂–±–æ–≤—ñ/—à—É–º–Ω—ñ)
IGNORE_NAMES = {
    "memory_store.json",          # —ñ –≤ config/, —ñ –≤ logs/
    "core_hash_reference.json",
}

# –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è, —è–∫—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ (—â–æ–± –º–µ–Ω—à–µ —à—É–º—É)
WATCH_EXTENSIONS = {".json", ".yaml", ".yml", ".ini", ".cfg"}

_last_alert_ts = 0.0

def _reset_emotion_after_delay():
    time.sleep(AUTO_RESET_SEC)
    try:
        emo = (get_emotion() or {}).get("emotion")
        if emo and emo != "—Å–ø–æ–∫—ñ–π":
            set_emotion("—Å–ø–æ–∫—ñ–π")
    except Exception:
        pass

def _on_change(file_path: Path):
    global _last_alert_ts

    # –ü—Ä–æ—Å—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —à—É–º—É
    name = file_path.name
    if name in IGNORE_NAMES:
        return
    if file_path.suffix.lower() not in WATCH_EXTENSIONS:
        return

    now = time.time()
    if (now - _last_alert_ts) < MIN_INTERVAL_SEC:
        return
    _last_alert_ts = now

    # –õ–æ–≥ –ø–æ–¥—ñ—ó
    event = {
        "ts": time.strftime("%Y-%m-%d %H:%M:%S"),
        "file": str(file_path),
        "event": "changed",
    }
    _append_json(SECURITY_LOG, event)

    # –ê–∫—É—Ä–∞—Ç–Ω–∞ —Ä–µ–∞–∫—Ü—ñ—è –±–µ–∑ –≥–æ–ª–æ—Å—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    try:
        set_emotion("–∑–ª—ñ—Å—Ç—å")  # –∞–±–æ "—Å–º—É—Ç–æ–∫" ‚Äî –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º
    except Exception:
        pass

    if VOICE_ALERTS_ENABLED:
        # –ë–µ–∑ –µ–º–æ–¥–∑—ñ —Ç–∞ –∑–∞–π–≤–æ—ó –¥—Ä–∞–º–∞—Ç—É—Ä–≥—ñ—ó
        try:
            speak(f"–í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω—É —É —Ñ–∞–π–ª—ñ {name}.")
        except Exception:
            pass

    # –ú º—è–∫–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –µ–º–æ—Ü—ñ—é –¥–æ ¬´—Å–ø–æ–∫—ñ–π¬ª
    threading.Thread(target=_reset_emotion_after_delay, daemon=True).start()

def start():
    """
    –ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ.
    file_watcher.monitor_files(on_change_callback=...)
    –º–∞—î —Å–∞–º —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ config/ —Ç–∞ logs/.
    """
    t = threading.Thread(target=monitor_files, kwargs={"on_change_callback": _on_change}, daemon=True)
    t.start()
    return t
