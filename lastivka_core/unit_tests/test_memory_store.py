import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent.parent))

import unittest
import time
from datetime import datetime, timedelta
from config import memory_store

class TestMemoryStore(unittest.TestCase):

    def setUp(self):
        # –°–∫–∏–¥–∞—î–º–æ –ø–∞–º º—è—Ç—å –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
        memory_store.save_memory({})

    def test_log_and_recall_thought(self):
        test_text = "–°–æ—Ñ—ñ—è ‚Äî —Ä–æ–∑—É–º–Ω–∞ —Å–∏—Å—Ç–µ–º–∞."
        memory_store.log_thought(test_text)
        result = memory_store.recall_memory()
        self.assertEqual(result, test_text)

    def test_search_memories(self):
        memory_store.log_thought("–¶–µ –ø–µ—Ä—à–∞ –¥—É–º–∫–∞.")
        memory_store.log_thought("–¶–µ –¥—Ä—É–≥–∞ –¥—É–º–∫–∞ –ø—Ä–æ —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ.")
        result = memory_store.search_memories("–≤–∞–∂–ª–∏–≤–µ")
        self.assertIn("–¥—Ä—É–≥–∞ –¥—É–º–∫–∞", result)

    def test_purge_old_thoughts(self):
        now = datetime.now()
        old = now - timedelta(days=60)
        memory = {
            "thoughts": [
                {"ts": old.isoformat(), "text": "–¥—É–∂–µ —Å—Ç–∞—Ä–∞ –¥—É–º–∫–∞"},
                {"ts": now.isoformat(), "text": "—Å–≤—ñ–∂–∞ –¥—É–º–∫–∞"}
            ]
        }
        memory_store.save_memory(memory)
        report = memory_store.purge_old_thoughts(days=30)
        updated = memory_store.load_memory()
        self.assertEqual(len(updated["thoughts"]), 1)
        self.assertIn("—Å–≤—ñ–∂–∞", updated["thoughts"][0]["text"])
        self.assertIn("–í–∏–¥–∞–ª–µ–Ω–æ", report)

    def test_check_triggers(self):
        memory_store.save_memory({
            "triggers": {
                "SOS": "üÜò –¢—Ä–∏–≤–æ–≥–∞!",
                "–°–æ—Ñ—ñ": "–¢–∞–∫, —è —Ç—É—Ç."
            }
        })
        response = memory_store.check_triggers("–ü—Ä–∏–≤—ñ—Ç, –°–æ—Ñ—ñ")
        self.assertEqual(response, "–¢–∞–∫, —è —Ç—É—Ç.")

if __name__ == "__main__":
    unittest.main()
