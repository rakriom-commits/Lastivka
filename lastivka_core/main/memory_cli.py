import sys
import os
from pathlib import Path

# üîÅ –î–∏–Ω–∞–º—ñ—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ lastivka_core
BASE_DIR = Path(__file__).resolve().parent.parent / "lastivka_core"
sys.path.append(str(BASE_DIR))

try:
    from memory_manager import remember, recall, forget, list_memories, recall_from_question
except ImportError:
    print("\033[91m‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ memory_manager. –ü–µ—Ä–µ–≤—ñ—Ä —à–ª—è—Ö –¥–æ lastivka_core.\033[0m")
    sys.exit(1)

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def show_menu():
    print("\033[96m\nüß† LASTIVKA MEMORY CLI\033[0m")
    print("1. ‚ûï –ó–∞–ø–∞–º º—è—Ç–∞—Ç–∏")
    print("2. üîç –ü—Ä–∏–≥–∞–¥–∞—Ç–∏ –∑–∞ –∫–ª—é—á–µ–º")
    print("3. ‚ùì –ü—Ä–∏–≥–∞–¥–∞—Ç–∏ –∑ –ø–∏—Ç–∞–Ω–Ω—è")
    print("4. üìã –£—Å—è –ø–∞–º º—è—Ç—å")
    print("5. üßπ –ó–∞–±—É—Ç–∏")
    print("6. üì¶ –ü–æ–∫–∞–∑–∞—Ç–∏ –∞—Ä—Ö—ñ–≤")
    print("0. üö™ –í–∏–π—Ç–∏")

def print_memory_block(memory):
    for key, value in memory.items():
        print(f"\nüîë {key}:")
        if isinstance(value, list):
            for item in value:
                if isinstance(item, dict):
                    print(f"  üïì {item.get('timestamp')} | üéº {item.get('tone')} | üí¨ {item.get('value')}")
                else:
                    print(f"  - {item}")
        else:
            if isinstance(value, dict):
                print(f"  üïì {value.get('timestamp')} | üéº {value.get('tone')} | üí¨ {value.get('value')}")
            else:
                print(f"  - {value}")

def main():
    while True:
        clear_screen()
        show_menu()
        choice = input("\nüî∏ \033[93m–û–±–µ—Ä–∏ –¥—ñ—é:\033[0m ").strip()

        if choice == "1":
            key = input("üóùÔ∏è \033[94m–ö–ª—é—á:\033[0m ").strip()
            value = input("üí≠ \033[94m–ó–Ω–∞—á–µ–Ω–Ω—è:\033[0m ").strip()
            tone = input("üéº \033[94m–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä. –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞, –µ–º–æ—Ü—ñ–π–Ω–∞):\033[0m ").strip()
            remember(key, value, tone=tone)
            input("\033[92m‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...\033[0m")

        elif choice == "2":
            key = input("üóùÔ∏è \033[94m–ö–ª—é—á –¥–ª—è –ø–æ—à—É–∫—É:\033[0m ").strip()
            result = recall(key)
            print("\033[92müì• –†–µ–∑—É–ª—å—Ç–∞—Ç:\033[0m")
            if result:
                print_memory_block({key: result})
            else:
                print("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            input("\n–ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        elif choice == "3":
            question = input("‚ùì \033[94m–ü–∏—Ç–∞–Ω–Ω—è:\033[0m ").strip()
            result = recall_from_question(question)
            print("\033[92müì• –í—ñ–¥–ø–æ–≤—ñ–¥—å:\033[0m\n", result or "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            input("\n–ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        elif choice == "4":
            memory = list_memories()
            if not memory:
                print("\n\033[91müï≥ –ü–∞–º º—è—Ç—å –ø–æ—Ä–æ–∂–Ω—è.\033[0m")
            else:
                print("\n\033[92müßæ –£—Å—è –ø–∞–º º—è—Ç—å:\033[0m")
                print_memory_block(memory)
            input("\n–ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        elif choice == "5":
            key = input("üóëÔ∏è \033[94m–ö–ª—é—á –¥–ª—è –∑–∞–±—É–≤–∞–Ω–Ω—è:\033[0m ").strip()
            forget(key)
            input("\033[92m‚úÖ –ó–∞–±—É—Ç–æ, —è–∫—â–æ –±—É–ª–æ. –ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...\033[0m")

        elif choice == "6":
            archive = list_memories(archive=True)
            if not archive:
                print("\n\033[91müï≥ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.\033[0m")
            else:
                print("\n\033[95müì¶ –ê—Ä—Ö—ñ–≤ –ø–∞–º º—è—Ç—ñ:\033[0m")
                print_memory_block(archive)
            input("\n–ù–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        elif choice == "0":
            print("\n\033[96müëã –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –õ–∏—Ü–∞—Ä—é.\033[0m")
            break

        else:
            input("\033[91m‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑. –ù–∞—Ç–∏—Å–Ω–∏ Enter...\033[0m")

if __name__ == "__main__":
    main()
