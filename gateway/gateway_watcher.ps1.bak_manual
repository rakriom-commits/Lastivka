function Get-PayloadHash([Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$p){
  if (-not $p -or $p -eq "") { return $null }
  if (-not (Test-Path $p))   { return $null }
  try {
    $o = (Get-Content $p -Raw -Encoding UTF8) | ConvertFrom-Json -ErrorAction Stop
    if ($o.PSObject.Properties['sha256']) { $o.PSObject.Properties.Remove('sha256') | Out-Null }
    $payload = $o | ConvertTo-Json -Depth 20 -Compress
    $b = [Text.Encoding]::UTF8.GetBytes($payload)
    $s = [Security.Cryptography.SHA256]::Create()
    return ([BitConverter]::ToString($s.ComputeHash($b))).Replace('-','').ToLowerInvariant()
  } catch { return $null }
}
function Write-LineSafe {
  param(
    [Parameter(Mandatory=$true)][string]$Path,
    [Parameter(Mandatory=$true)][string]$Line,
    [int]$Retries = 8,
    [int]$DelayMs = 120
  )
  for($i=0; $i -lt $Retries; $i++){
    try{
      New-Item -ItemType Directory -Force -Path (Split-Path $Path) | Out-Null
      $fs = [System.IO.File]::Open(
        $Path,
        [System.IO.FileMode]::Append,
        [System.IO.FileAccess]::Write,
        [System.IO.FileShare]::ReadWrite
      )
      try{
        $enc = [System.Text.UTF8Encoding]::new($false)
        $sw  = New-Object System.IO.StreamWriter($fs, $enc)
        $sw.WriteLine($Line)
        $sw.Flush()
        $sw.Dispose()
      } finally {
        $fs.Dispose()
      }
      break
    } catch {
      if($i -ge $Retries-1){ throw }
      Start-Sleep -Milliseconds $DelayMs
    }
  }
}
function W-Log([string]$msg){
  try{
    $ts = (Get-Date).ToString('s')
    Write-LineSafe -Path $watcherLog -Line ("{0} {1}" -f $ts, $msg)
  } catch { }
}
finally { $fs.Dispose() }
      break
    } catch {
      if($i -ge $Retries-1){ throw }
      Start-Sleep -Milliseconds $DelayMs
    }
  }
}

# === LOG PATHS ===
$watcherLog = Join-Path $Root 'logs\watcher.log'   # службовий лог watcher-а
$gatewayLog = Join-Path $Root 'logs\gateway.log'   # лог, який може крутити logs.rotate

$inbox = Join-Path $Root 'inbox'
$outbox = Join-Path $Root 'outbox'
$archive = Join-Path $Root 'archive'
$quarantine = Join-Path $Root 'quarantine'
$log = $gatewayLog
$allowFlag = "C:\Lastivka\ALLOW_APPLY.flag"
$stopFlag = Join-Path $Root 'STOP.flag'

$WhitelistFocus = @(
  'verify.integrity',
  'logs.rotate',
  'memory.optimization',
  'report.daily'
)

New-Item $inbox,$outbox,$archive,$quarantine,(Split-Path $log) -ItemType Directory -Force | Out-Null
{1}" -f $ts, $msg)
  } catch { }
}

function Get-PayloadHash([Parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$p){
  if (-not "" -or "" -eq "") { return $null }
  if (-not (Test-Path "")) { return $null }
  try {
    $o = (Get-Content "" -Raw -Encoding UTF8) | ConvertFrom-Json -ErrorAction Stop
    if ($o.PSObject.Properties['sha256']) { $o.PSObject.Properties.Remove('sha256') | Out-Null }
    $payload = $o | ConvertTo-Json -Depth 20 -Compress
    $b = [Text.Encoding]::UTF8.GetBytes($payload)
    $s = [Security.Cryptography.SHA256]::Create()
    return ([BitConverter]::ToString($s.ComputeHash($b))).Replace('-','').ToLowerInvariant()
  } catch { return $null }
}

W-Log "watcher start (poll=$PollSec s)"
while($true){
  if(Test-Path $stopFlag){ W-Log "STOP.flag present -> idle"; Start-Sleep -Seconds ($PollSec*6); continue }

  $taskFile = Get-ChildItem $inbox -Filter '*.task.json' -File | Sort-Object LastWriteTime | Select-Object -First 1
  if(-not $taskFile){ Start-Sleep -Seconds $PollSec; continue }

  try { $task = Get-Content $taskFile.FullName -Raw -Encoding UTF8 | ConvertFrom-Json -ErrorAction Stop }
  catch { W-Log "bad json: $($taskFile.Name) -> quarantine"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; Start-Sleep -Seconds 1; continue }

  if($task.sender -ne 'sofia'){ W-Log "sender not allowed: $($task.sender)"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; continue }
  if(($task.focus -as [string]) -notin $WhitelistFocus){ W-Log "focus not allowed: $($task.focus)"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; continue }

  # --- SAFE payload hash & ACK ---
  # --- SAFE payload hash & ACK ---
  # --- SAFE payload hash & ACK ---
  $payloadHash = Get-PayloadHash $taskFile.FullName
  if(-not $payloadHash){
    W-Log "hash calc failed -> quarantine: $($task.id)"
    Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force
    continue
  }
  $hashOk = ($task.sha256 -as [string]) -and ($payloadHash -as [string]) -and ($task.sha256.ToLower() -eq $payloadHash.ToLower())

  # ACK
  $ackObj = @{
    id=$task.id; ts=(Get-Date).ToString("s"); receiver="lastivka"; status="received"; version="gateway-1.0"; hash_ok=$hashOk
  }
  $ackObj | ConvertTo-Json -Depth 6 | Out-File (Join-Path $outbox "$($task.id).ack.json") -Encoding UTF8
  if(-not $hashOk){ W-Log "hash mismatch -> quarantine: $($task.id)"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; continue }

  $dryRun = -not (Test-Path $allowFlag) -or ($task.limits.mode -ne 'safe')
  W-Log "task $($task.id) kind=$($task.kind) focus=$($task.focus) dryRun=$dryRun"

  # ---------------- HANDLERS ----------------
  $artifacts = @()
  $resultSummary = "watcher run (dryRun={0})" -f $dryRun
  $ok = $true

  if ($task.focus -eq 'verify.integrity') {
    $checks = @(
      'C:\Lastivka\memory',
      'C:\Lastivka\memory\snapshots',
      'C:\Lastivka\logs',
      'C:\Lastivka\indices'
    )
    $report = "C:\Lastivka\gateway\cloud_mailbox\outbox\verify_integrity_{0:yyyyMMdd_HHmmss}.txt" -f (Get-Date)
    $lines = @()
    foreach($p in $checks){
      $exists = Test-Path $p
      $lines += ("[{0}] {1}" -f ($(if($exists){'OK'}else{'MISS'}), $p))
      if(-not $exists){ $ok = $false }
    }
    $lines += ("allow_apply_flag: " + (Test-Path $allowFlag))
    $lines -join "`r`n" | Out-File $report -Encoding UTF8
    $artifacts += $report
    $resultSummary = ("verify.integrity: {0} paths checked; ok={1}" -f $checks.Count, $ok)
  }
  elseif ($task.focus -eq 'logs.rotate') {
  $thresholdBytes = 1MB
  $logPath = $log
  $ok = $true

  if (Test-Path $logPath) { $size = (Get-Item $logPath).Length } else { $size = 0 }
  $needRotate = $size -ge $thresholdBytes

  $writes = ($task.limits.writes -as [string])
  $writesAllowed = $writes -and ($writes -in @('guarded','all'))

  if ($needRotate -and -not $dryRun -and $writesAllowed) {
    $stamp = Get-Date -Format 'yyyyMMdd_HHmmss'
    $rotated = Join-Path (Split-Path $logPath) ("gateway_{0}.log" -f $stamp)
    Move-Item $logPath $rotated -Force
    New-Item -ItemType File -Path $logPath -Force | Out-Null
    $artifacts += $rotated
    $resultSummary = ('logs.rotate: rotated at ~{0:N0} bytes -> {1}' -f $size, $rotated)
  }
  elseif ($needRotate -and -not $writesAllowed) {
    $resultSummary = ('logs.rotate: blocked (writes={0}) @ ~{1:N0} bytes' -f $writes, $size)
  }
  elseif ($needRotate -and $dryRun) {
    $resultSummary = ('logs.rotate: would rotate @ ~{0:N0} bytes (dryRun)' -f $size)
  }
  else {
    $resultSummary = ('logs.rotate: no action (size={0:N0} bytes)' -f $size)
  }
} else {
    $size = 0
    $needRotate = $false
  }

  # Дозвіл на дію: не dryRun І ліміт writes у {'guarded','all'}
  $writesAllowed = ($task.limits.writes -as [string]) -and ( ($task.limits.writes -eq 'guarded') -or ($task.limits.writes -eq 'all') )
  if ($needRotate -and -not $dryRun -and $writesAllowed) {
    $stamp = Get-Date -Format 'yyyyMMdd_HHmmss'
    $rotated = Join-Path (Split-Path $logPath) ("gateway_{0}.log" -f $stamp)
    Move-Item $logPath $rotated -Force
    New-Item -ItemType File -Path $logPath -Force | Out-Null
    $artifacts += $rotated
    $resultSummary = ("logs.rotate: rotated at ~{0:N0} bytes -> {1}" -f $size, $rotated)
  }
  elseif ($needRotate -and (-not $writesAllowed)) {
    $resultSummary = (('logs.rotate: blocked (writes={0}) @ ~{1:N0} bytes' -f $writes, $size))
  }
  elseif ($needRotate -and $dryRun) {
    $resultSummary = (('logs.rotate: would rotate @ ~{0:N0} bytes (dryRun)' -f $size))
  }
  else {
    $resultSummary = ("logs.rotate: no action (size={0:N0} bytes)" -f $size)
}
  else {
    Start-Sleep -Seconds ([math]::Min(($task.limits.max_runtime_s -as [int]), 5))
  }
  # -------------- END HANDLERS --------------

  # STATUS
  @{
    id=$task.id; ts=(Get-Date).ToString("s"); phase="done";
    result=@{ ok=$ok; summary=$resultSummary };
    artifacts=$artifacts; guard=@{ apply_used=(! $dryRun); writes=0 }
  } | ConvertTo-Json -Depth 6 | Out-File (Join-Path $outbox "$($task.id).status.json") -Encoding UTF8

  # ARCHIVE
  $day = (Get-Date).ToString("yyyyMMdd")
  $archDir = Join-Path $archive $day
  New-Item $archDir -ItemType Directory -Force | Out-Null
  Move-Item $taskFile.FullName (Join-Path $archDir $taskFile.Name) -Force
}

W-Log "watcher start (poll=$PollSec s)"
while($true){
  if(Test-Path $stopFlag){ W-Log "STOP.flag present -> idle"; Start-Sleep -Seconds ($PollSec*6); continue }

  $taskFile = Get-ChildItem $inbox -Filter '*.task.json' -File | Sort-Object LastWriteTime | Select-Object -First 1
  if(-not $taskFile){ Start-Sleep -Seconds $PollSec; continue }

  try { $task = Get-Content $taskFile.FullName -Raw -Encoding UTF8 | ConvertFrom-Json -ErrorAction Stop }
  catch { W-Log "bad json: $($taskFile.Name) -> quarantine"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; Start-Sleep -Seconds 1; continue }

  if($task.sender -ne 'sofia'){ W-Log "sender not allowed: $($task.sender)"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; continue }
  if(($task.focus -as [string]) -notin $WhitelistFocus){ W-Log "focus not allowed: $($task.focus)"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; continue }

  # --- SAFE payload hash & ACK ---
  # --- SAFE payload hash & ACK ---
  # --- SAFE payload hash & ACK ---
  $payloadHash = Get-PayloadHash $taskFile.FullName
  if(-not $payloadHash){
    W-Log "hash calc failed -> quarantine: $($task.id)"
    Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force
    continue
  }
  $hashOk = ($task.sha256 -as [string]) -and ($payloadHash -as [string]) -and ($task.sha256.ToLower() -eq $payloadHash.ToLower())

  # ACK
  $ackObj = @{
    id=$task.id; ts=(Get-Date).ToString("s"); receiver="lastivka"; status="received"; version="gateway-1.0"; hash_ok=$hashOk
  }
  $ackObj | ConvertTo-Json -Depth 6 | Out-File (Join-Path $outbox "$($task.id).ack.json") -Encoding UTF8
  if(-not $hashOk){ W-Log "hash mismatch -> quarantine: $($task.id)"; Move-Item $taskFile.FullName (Join-Path $quarantine $taskFile.Name) -Force; continue }

  $dryRun = -not (Test-Path $allowFlag) -or ($task.limits.mode -ne 'safe')
  W-Log "task $($task.id) kind=$($task.kind) focus=$($task.focus) dryRun=$dryRun"

  # ---------------- HANDLERS ----------------
  $artifacts = @()
  $resultSummary = "watcher run (dryRun={0})" -f $dryRun
  $ok = $true

  if ($task.focus -eq 'verify.integrity') {
    $checks = @(
      'C:\Lastivka\memory',
      'C:\Lastivka\memory\snapshots',
      'C:\Lastivka\logs',
      'C:\Lastivka\indices'
    )
    $report = "C:\Lastivka\gateway\cloud_mailbox\outbox\verify_integrity_{0:yyyyMMdd_HHmmss}.txt" -f (Get-Date)
    $lines = @()
    foreach($p in $checks){
      $exists = Test-Path $p
      $lines += ("[{0}] {1}" -f ($(if($exists){'OK'}else{'MISS'}), $p))
      if(-not $exists){ $ok = $false }
    }
    $lines += ("allow_apply_flag: " + (Test-Path $allowFlag))
    $lines -join "`r`n" | Out-File $report -Encoding UTF8
    $artifacts += $report
    $resultSummary = ("verify.integrity: {0} paths checked; ok={1}" -f $checks.Count, $ok)
  }
  elseif ($task.focus -eq 'logs.rotate') {
  $thresholdBytes = 1MB
  $logPath = $log
  $ok = $true

  if (Test-Path $logPath) { $size = (Get-Item $logPath).Length } else { $size = 0 }
  $needRotate = $size -ge $thresholdBytes

  $writes = ($task.limits.writes -as [string])
  $writesAllowed = $writes -and ($writes -in @('guarded','all'))

  if ($needRotate -and -not $dryRun -and $writesAllowed) {
    $stamp = Get-Date -Format 'yyyyMMdd_HHmmss'
    $rotated = Join-Path (Split-Path $logPath) ("gateway_{0}.log" -f $stamp)
    Move-Item $logPath $rotated -Force
    New-Item -ItemType File -Path $logPath -Force | Out-Null
    $artifacts += $rotated
    $resultSummary = ('logs.rotate: rotated at ~{0:N0} bytes -> {1}' -f $size, $rotated)
  }
  elseif ($needRotate -and -not $writesAllowed) {
    $resultSummary = ('logs.rotate: blocked (writes={0}) @ ~{1:N0} bytes' -f $writes, $size)
  }
  elseif ($needRotate -and $dryRun) {
    $resultSummary = ('logs.rotate: would rotate @ ~{0:N0} bytes (dryRun)' -f $size)
  }
  else {
    $resultSummary = ('logs.rotate: no action (size={0:N0} bytes)' -f $size)
  }
} else {
    $size = 0
    $needRotate = $false
  }

  # Дозвіл на дію: не dryRun І ліміт writes у {'guarded','all'}
  $writesAllowed = ($task.limits.writes -as [string]) -and ( ($task.limits.writes -eq 'guarded') -or ($task.limits.writes -eq 'all') )
  if ($needRotate -and -not $dryRun -and $writesAllowed) {
    $stamp = Get-Date -Format 'yyyyMMdd_HHmmss'
    $rotated = Join-Path (Split-Path $logPath) ("gateway_{0}.log" -f $stamp)
    Move-Item $logPath $rotated -Force
    New-Item -ItemType File -Path $logPath -Force | Out-Null
    $artifacts += $rotated
    $resultSummary = ("logs.rotate: rotated at ~{0:N0} bytes -> {1}" -f $size, $rotated)
  }
  elseif ($needRotate -and (-not $writesAllowed)) {
    $resultSummary = (('logs.rotate: blocked (writes={0}) @ ~{1:N0} bytes' -f $writes, $size))
  }
  elseif ($needRotate -and $dryRun) {
    $resultSummary = (('logs.rotate: would rotate @ ~{0:N0} bytes (dryRun)' -f $size))
  }
  else {
    $resultSummary = ("logs.rotate: no action (size={0:N0} bytes)" -f $size)
}
  else {
    Start-Sleep -Seconds ([math]::Min(($task.limits.max_runtime_s -as [int]), 5))
  }
  # -------------- END HANDLERS --------------

  # STATUS
  @{
    id=$task.id; ts=(Get-Date).ToString("s"); phase="done";
    result=@{ ok=$ok; summary=$resultSummary };
    artifacts=$artifacts; guard=@{ apply_used=(! $dryRun); writes=0 }
  } | ConvertTo-Json -Depth 6 | Out-File (Join-Path $outbox "$($task.id).status.json") -Encoding UTF8

  # ARCHIVE
  $day = (Get-Date).ToString("yyyyMMdd")
  $archDir = Join-Path $archive $day
  New-Item $archDir -ItemType Directory -Force | Out-Null
  Move-Item $taskFile.FullName (Join-Path $archDir $taskFile.Name) -Force
}










