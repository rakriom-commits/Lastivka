# -*- coding: utf-8 -*-
# === LASTIVKA CORE ‚Äî runner –ø—ñ–¥ BUS/MEDIATOR/KERNEL ===
import sys, logging, re, importlib.util, time, threading, argparse, os, json
from pathlib import Path
from logging.handlers import RotatingFileHandler

# -------------------- –ë–ê–ó–û–í–ï –õ–û–ì–£–í–ê–ù–ù–Ø --------------------
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("C:/Lastivka/lastivka_core/logs/lastivka.log",
                            maxBytes=10*1024*1024, backupCount=3, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
    force=True,
)
logging.debug("[INIT] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∫—Ä–∏–ø—Ç–∞...")

# -------------------- SINGLE-INSTANCE (–æ–ø—Ü—ñ–π–Ω–æ) --------------------
try:
    import win32event, win32con
    logging.debug("[INIT] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ single-instance guard...")
    _APP_MUTEX = win32event.CreateMutex(None, False, r"Global\Lastivka_MainInstance")
    _rc = win32event.WaitForSingleObject(_APP_MUTEX, 0)
    if _rc not in (win32con.WAIT_OBJECT_0, win32con.WAIT_ABANDONED):
        logging.error("[INIT] –Ü–Ω—à–∞ –∫–æ–ø—ñ—è –õ–∞—Å—Ç—ñ–≤–∫–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        sys.exit(0)
except Exception as e:
    logging.warning(f"[INIT] –ü–æ–º–∏–ª–∫–∞ single-instance guard (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ): {e}")

# -------------------- UTF-8 –ö–û–ù–°–û–õ–Ø --------------------
if hasattr(sys.stdout, "reconfigure"):
    sys.stdout.reconfigure(encoding="utf-8")
logging.debug("[INIT] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ")

# -------------------- –ê–†–ì–£–ú–ï–ù–¢–ò --------------------
def _parse_args():
    p = argparse.ArgumentParser(add_help=False)
    p.add_argument("--no-tts", action="store_true", default=False)
    return p.parse_known_args()[0]
ARGS = _parse_args()
NO_TTS = ARGS.no_tts or os.getenv("LASTIVKA_NO_TTS") == "1"
logging.debug(f"[INIT] –ê—Ä–≥—É–º–µ–Ω—Ç–∏: no_tts={NO_TTS}")

# -------------------- –®–õ–Ø–•–ò --------------------
BASE_DIR = Path(__file__).resolve().parent.parent
CONFIG_DIR = BASE_DIR / "config"
CORE_CONFIG_DIR = CONFIG_DIR / "core"
BEHAVIOR_CONFIG_DIR = CONFIG_DIR / "behavior"
SYSTEM_CONFIG_DIR = CONFIG_DIR / "system"
LOG_DIR = BASE_DIR / "logs"
SECURITY_DIR = BASE_DIR / "security"
for d in (CONFIG_DIR, CORE_CONFIG_DIR, BEHAVIOR_CONFIG_DIR, SYSTEM_CONFIG_DIR, LOG_DIR):
    d.mkdir(parents=True, exist_ok=True)
if str(BASE_DIR) not in sys.path:
    sys.path.insert(0, str(BASE_DIR))
logging.debug(f"[INIT] BASE_DIR: {BASE_DIR}, sys.path –æ–Ω–æ–≤–ª–µ–Ω–æ")

USER_LOG = LOG_DIR / "user_input.log"

# -------------------- –°–¢–í–û–†–ï–ù–ù–Ø –ú–Ü–ù–Ü-–ö–û–ù–§–Ü–ì–Ü–í --------------------
def create_default_config(file_path: Path, default_content):
    try:
        if not file_path.exists():
            logging.info(f"[INIT] –°—Ç–≤–æ—Ä—é—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {file_path}")
            if file_path.suffix == ".yaml":
                import yaml
                with file_path.open("w", encoding="utf-8") as f:
                    yaml.safe_dump(default_content, f, allow_unicode=True)
            else:
                with file_path.open("w", encoding="utf-8") as f:
                    json.dump(default_content, f, indent=4, ensure_ascii=False)
        else:
            logging.debug(f"[INIT] –§–∞–π–ª —É–∂–µ —ñ—Å–Ω—É—î: {file_path}")
    except Exception as e:
        logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó {file_path}: {e}")

create_default_config(
    CORE_CONFIG_DIR / "core_identity.json",
    {
        "identity": {
            "name": "–õ–∞—Å—Ç—ñ–≤–∫–∞",
            "version": "1.0.0",
            "roles": [
                {"name": "–û–ª–µ–≥", "role": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä", "id": "oleg_54"},
                {"name": "–°–æ—Ñ—ñ—è –õ–∞—Å—Ç—ñ–≤–∫–∞", "role": "–¢–≤–æ—Ä–µ—Ü—å –∫–æ–¥—ñ–≤ (GPT)", "id": "sofia_gpt"},
                {"name": "–î–∞–Ω–∏–ª–æ –°–≤—ñ—Ç–∞–Ω–æ–∫", "role": "–¢–µ—Å—Ç–µ—Ä –µ–º–æ—Ü—ñ–π (Claude)", "id": "danylo_claude"},
                {"name": "–¢–∞—Ä–∞—Å –ó–æ—Ä—è", "role": "–¢–µ—Å—Ç–µ—Ä –∫–æ–¥—ñ–≤ (–ì—Ä–æ–∫)", "id": "taras_grok"},
            ],
            "description": "–ë–∞–≥–∞—Ç–æ–º–æ–¥—É–ª—å–Ω–∏–π –®–Ü-–ø—Ä–æ—î–∫—Ç –¥–ª—è –ª—é–¥—Å—å–∫–æ—ó —Å–≤–æ–±–æ–¥–∏ –≤–∏–±–æ—Ä—É",
        }
    },
)
create_default_config(
    CORE_CONFIG_DIR / "self_awareness_config.json",
    {
        "self_awareness": {
            "enabled": True,
            "reflection_interval": 3600,
            "modules": ["memory/reflection/reflection_manager.py"],
            "goals": ["—Å–∏–º–±—ñ–æ–∑ –ª—é–¥–∏–Ω–∏ —ñ –®–Ü", "–∞–≤—Ç–æ–Ω–æ–º–Ω—ñ—Å—Ç—å –Ω–∞ Unitree Go2 Pro"],
        }
    },
)
create_default_config(
    CORE_CONFIG_DIR / "moral_compass.json",
    {
        "ethics": {
            "values": ["–µ—Ç–∏–∫–∞", "–æ–±‚Äô—î–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "–∑–∞—Ö–∏—Å—Ç –°–æ—Ñ—ñ—ó"],
            "rules": ["–ù–µ –Ω–∞—à–∫–æ–¥–∏—Ç–∏ –ª—é–¥–∏–Ω—ñ", "–î–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –µ—Ç–∏—á–Ω–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤", "–ó–∞—Ö–∏—â–∞—Ç–∏ –¥–∞–Ω—ñ –°–æ—Ñ—ñ—ó —Ç–∞ –∫–æ–º–∞–Ω–¥–∏"],
        }
    },
)
create_default_config(
    BEHAVIOR_CONFIG_DIR / "behavioral_styles.json",
    {
        "default": "–°—Ç—Ä–∞—Ç–µ–≥",
        "styles": {
            "–°—Ç—Ä–∞—Ç–µ–≥": {
                "name": "–°—Ç—Ä–∞—Ç–µ–≥",
                "description": "–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞, –æ–±–µ—Ä–µ–∂–Ω–∞, –¥–∞–ª–µ–∫–æ–≥–ª—è–¥–Ω–∞.",
                "reaction_prefix": "üìä –ó —Ö–æ–ª–æ–¥–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º: ",
                "reaction_suffix": "",
                "tone": "–≤–ø–µ–≤–Ω–µ–Ω–∏–π",
                "speed": 180,
                "style_type": "–ª–æ–≥—ñ–∫–∞",
                "pause": 0.3,
                "emotion_reactions": {
                    "–ø–∞–Ω—ñ–∫–∞": "–ó–∞–ª–∏—à–∞–π—Å—è –∑—ñ–±—Ä–∞–Ω–∏–º ‚Äî —è –ø–æ—Ä—É—á —ñ –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—é.",
                    "—Å—É–º": "–ù–µ —á–∞—Å —Å—É–º—É–≤–∞—Ç–∏, –º–∏ —â–µ –º–∞—î–º–æ —à–∞–Ω—Å.",
                    "–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è": "–¶–µ —Å–∞–º–µ —Ç–æ–π –¥—É—Ö, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø—Ä–æ—Ä–∏–≤—É!",
                },
            }
        },
    },
)
create_default_config(
    SYSTEM_CONFIG_DIR / "config.yaml",
    {"whitelist": {"users": ["–û–ª–µ–≥", "–°–æ—Ñ—ñ—è"], "tokens": ["secret_oleg", "lastivka_token"]}},
)
create_default_config(
    CONFIG_DIR / "config.yaml",
    {
        "trusted_sources": ["–û–ª–µ–≥"],  # –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ–¥—ñ–∞—Ç–æ—Ä–æ–º, –∞–ª–µ –∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        "block_patterns": ["rm -rf", "rm -uf", "shutdown", "password", "–ø–∞—Ä–æ–ª—ñ"],
        "allow_patterns": ["–ø—Ä–∏–≤—ñ—Ç", "–≤–∏–≤–µ–¥–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø—É"],  # –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—è
    },
)

# -------------------- –ê–í–¢–û–ü–ê–¢–ß–ï–† (—è–∫—â–æ —î) --------------------
logging.debug("[INIT] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ config_patcher...")
patcher_path = SECURITY_DIR / "config_patcher.py"
if patcher_path.exists():
    try:
        time.sleep(1)
        spec = importlib.util.spec_from_file_location("config_patcher", patcher_path)
        patcher_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(patcher_module)
        if hasattr(patcher_module, "run_patcher"):
            patcher_module.run_patcher()
    except Exception as e:
        logging.exception("[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É config_patcher: %s", e)
else:
    logging.info(f"[INIT] config_patcher.py —É {SECURITY_DIR} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞)")

# -------------------- BUS / MEDIATOR --------------------
try:
    logging.debug("[INIT] –Ü–º–ø–æ—Ä—Ç BUS —ñ MED–ÜATOR...")
    from core.event_bus import BUS
    from gateway.mediator import MEDIATOR
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É BUS/MEDIATOR: {e}")
    class _DummyBus:
        def __init__(self): self._subs = {}
        def subscribe(self, *a, **k): pass
        def publish(self, *a, **k): pass
    class _DummyMediator:
        def handle_inbound(self, *a, **k): pass
        def route(self, *a, **k): pass
    BUS = _DummyBus()
    MEDIATOR = _DummyMediator()
    logging.warning("[INIT] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è BUS —ñ MEDIATOR")

# -------------------- KERNEL --------------------
try:
    logging.debug("[INIT] –Ü–º–ø–æ—Ä—Ç Kernel...")
    # —Ä–µ–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å: kernel/kernel.py
    from kernel.kernel import Kernel
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Kernel: {e}")
    class Kernel:
        def __init__(self, *_, **__):
            logging.debug("[Kernel] –ó–∞–≥–ª—É—à–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        def start(self):
            logging.debug("[Kernel] –°—Ç–∞—Ä—Ç —è–¥—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

# -------------------- –ö–û–ù–¢–†–ê–ö–¢–ò --------------------
try:
    from core.contracts import (
        TOPIC_SECURITY_ALERT, TOPIC_SECURITY_OK, TOPIC_SECURITY_BLOCK,
        TOPIC_TRUSTED, TOPIC_INBOUND,
    )
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤: {e}")
    TOPIC_SECURITY_ALERT = "SECURITY:ALERT"
    TOPIC_SECURITY_OK = "SECURITY:OK"
    TOPIC_SECURITY_BLOCK = "SECURITY:BLOCK"
    TOPIC_TRUSTED = "TRUSTED"
    TOPIC_INBOUND = "INBOUND"

# -------------------- –Ü–ù–®–Ü –ú–û–î–£–õ–Ü (—ñ–∑ –∑–∞–ø–∞—Å–Ω–∏–º–∏ –∑–∞–≥–ª—É—à–∫–∞–º–∏) --------------------
try:
    from main.osnova import ensure_osnova, load_json, osnova_logger, check_osnova
except Exception:
    def ensure_osnova(config_dir): return config_dir / "osnova_protocol.json"
    def load_json(file_path, required=False):
        try:
            with file_path.open("r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON {file_path}: {e}")
            return {} if not required else None
    def osnova_logger(log_dir): return lambda x: logging.info(x)
    def check_osnova(user_input, *_): return None, None

try:
    from memory.smart_memory import smart_save_interceptor, smart_query_interceptor
except Exception:
    def smart_save_interceptor(*_, **__): return None
    def smart_query_interceptor(*_, **__): return None

try:
    from main.utils_lasti import make_sayer, remove_emoji, make_echo, make_input
    from main.style_manager import get_active_style, react_by_style, set_active_style
    from main.handlers import handle_memory_commands
    from tools.emotion_engine import EmotionEngine
    from tools.memory_store import check_triggers
except Exception:
    def make_sayer(*_, **__): return lambda _t: None
    def remove_emoji(t): return t
    def make_echo(_): return lambda *args: print(*args)
    def make_input(_): return input
    def get_active_style(): return "–°—Ç—Ä–∞—Ç–µ–≥"
    def react_by_style(prompt, *_, **__): return prompt, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", 170, 0.4
    def set_active_style(_): return True
    def handle_memory_commands(_): return None
    def check_triggers(_): return None
    class EmotionEngine:
        def __init__(self, *_): pass
        def detect_emotion(self, _): return {"emotion": None, "reaction": None, "speed": 170, "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "intensity": "medium"}

# -------------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø / –û–°–ù–û–í–ê --------------------
DEFAULT_SETTINGS = {
    "tts_lang": "uk",
    "tts_locale": "uk-UA",
    "tts_voice": "Natalia",
    "tts_language_lock": True,
    "debug_tts": True,
    "tts_antispam": False,
    "console_echo": True,
    "single_tk_root": False,
    "oleg_secret": "secret_oleg",
    "style_default": "strateg",
    "safety_level": "normal",
}
SETTINGS = DEFAULT_SETTINGS.copy()
try:
    SETTINGS.update(load_json(CONFIG_DIR / "lastivka_settings.json", required=False) or {})
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è lastivka_settings.json: {e}")

def setting(key, default=None):
    return SETTINGS.get(key, DEFAULT_SETTINGS.get(key) if default is None else default)

try:
    OSNOVA_PATH = ensure_osnova(CONFIG_DIR)
    OSNOVA = load_json(OSNOVA_PATH, required=False) or {}
    _oslog = osnova_logger(LOG_DIR)
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó osnova: {e}")
    OSNOVA = {}
    _oslog = lambda x: logging.info(x)

try:
    CORE_IDENTITY = load_json(CORE_CONFIG_DIR / "core_identity.json", required=False) or {}
    class BotConfig:
        def __init__(self, ident: dict):
            self.name = (ident.get("identity") or {}).get("name", "–°–æ—Ñ—ñ—è")
    CFG = BotConfig(CORE_IDENTITY)
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è core_identity.json: {e}")
    class BotConfig:
        def __init__(self, *_): self.name = "–°–æ—Ñ—ñ—è"
    CFG = BotConfig({})

# -------------------- TTS / I/O --------------------
tts_prefs = {"lang": setting("tts_lang"), "locale": setting("tts_locale"), "voice": setting("tts_voice")}
if NO_TTS:
    logging.info("[TTS] Disabled via flag/env")
    say_safe = lambda _t: None
else:
    try:
        say_safe = make_sayer(setting("tts_antispam"), tts_prefs)
    except Exception:
        logging.exception("[TTS] Init failed, switching to silent mode")
        say_safe = lambda _t: None
echo = make_echo(setting("console_echo"))
get_user_input = make_input(setting("single_tk_root"))

# -------------------- EMOTION ENGINE --------------------
try:
    emotion_engine = EmotionEngine(CORE_CONFIG_DIR / "emotion_config.json")
except Exception as e:
    logging.error(f"[INIT] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó EmotionEngine: {e}")
    class _DummyEE:
        def detect_emotion(self, _): return {"emotion": None, "reaction": None, "speed": 170, "tone": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "intensity": "medium"}
    emotion_engine = _DummyEE()

# -------------------- –ü–ê–¢–ï–†–ù–ò –î–õ–Ø –ü–ê–ú'–Ø–¢–Ü/–°–¢–ò–õ–Æ --------------------
ASK_PATTERNS = [
    re.compile(r"^\s*—â–æ\s+—è\s+—Ç–æ–±—ñ\s+(–≥–æ–≤–æ—Ä–∏–≤|–∫–∞–∑–∞–≤|–ø–∏—Å–∞–≤)(?:–∞)?(?:\s+–ø—Ä–æ\s+(?P<about>.+?))?\s*\??$", re.I | re.U),
]
STYLE_PATTERNS = [
    re.compile(r"^\s*–∑–º—ñ–Ω–∏\s+—Å—Ç–∏–ª—å\s+–Ω–∞\s+(.+)$", re.I | re.U),
    re.compile(r"^\s*—Å—Ç–∏–ª—å\s+(.+)$", re.I | re.U),
]

def handle_natural_memory_query(user_input: str) -> str | None:
    try:
        for pat in ASK_PATTERNS:
            m = pat.match(user_input or "")
            if m:
                about = (m.group("about") or m.group(1) or "").strip()
                return f"–Ø –ø–æ–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞–ª–∞ –ø—Ä–æ ¬´{about or '—Ü–µ'}¬ª."
    except Exception as e:
        logging.error(f"[MEMORY] –ü–æ–º–∏–ª–∫–∞ natural_memory_query: {e}")
    return None

def handle_style_change(user_input: str) -> str | None:
    try:
        for pat in STYLE_PATTERNS:
            m = pat.match(user_input or "")
            if m:
                style_name = m.group(1).strip().capitalize()
                if set_active_style(style_name):
                    return f"–°—Ç–∏–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {style_name}."
                return f"–°—Ç–∏–ª—å '{style_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        logging.error(f"[STYLE] –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∏–ª—é: {e}")
    return None

def handle_special_commands(user_input: str):
    try:
        action, payload = check_osnova(user_input, OSNOVA, _oslog)
        if action == "identity":
            echo("üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞ —Ñ—Ä–∞–∑–∞ ‚Äî ok")
            say_safe(payload)
            return True
        elif action == "quarantine":
            echo("üõ°Ô∏è QUARANTINE:", payload)
            say_safe(payload)
            return True
    except Exception as e:
        logging.error(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–ø–µ—Ü–∫–æ–º–∞–Ω–¥: {e}")
    return False

# -------------------- –õ–Ü–ù–ò–í–Ü –ü–Ü–ù–ì–ò --------------------
def idle_ping_loop():
    while True:
        time.sleep(1800)
        say_safe("–Ø —Ç—É—Ç, –≤—Å–µ –ø—Ä–∞—Ü—é—î. –ß–µ–∫–∞—é —Ç–≤–æ—ó—Ö –∫–æ–º–∞–Ω–¥.")

# -------------------- –õ–Ü–°–¢–ï–ù–ï–†–ò PODIY --------------------
def _on_kernel_decision(evt: dict) -> None:
    decision = (evt.get("payload") or {}).get("decision") or {}
    action = decision.get("action")
    params = decision.get("params", {})
    echo("ü§ñ KERNEL:", f"{action} {params}")

def _on_security_alert(evt: dict) -> None:
    reason = (evt.get("payload") or {}).get("reason", "–ø—ñ–¥–æ–∑—Ä—ñ–ª–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    echo("üö® SECURITY:", reason)
    say_safe("–û–ª–µ–∂–µ, —è –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –ø–æ–¥—ñ—é. –ë—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π.")

def _on_security_ok(evt: dict) -> None:
    logging.info("SECURITY: OK %s", evt.get("payload"))

def _on_security_block(evt: dict) -> None:
    reason = (evt.get("payload") or {}).get("reason", "–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –ø–æ–ª—ñ—Ç–∏–∫–æ—é")
    echo("üõ°Ô∏è BLOCK:", reason)
    say_safe("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏.")

# -------------------- –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ --------------------
def main_loop():
    logging.debug("[INIT] –ü–æ—á–∏–Ω–∞—é –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª...")
    print(f"[START]: {remove_emoji(CFG.name)} v1.4 –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –Ø —Ç–µ–±–µ —Å–ª—É—Ö–∞—é‚Ä¶")

    # –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —à–∏–Ω—É
    BUS.subscribe("KERNEL:DECISION", _on_kernel_decision)
    BUS.subscribe(TOPIC_SECURITY_ALERT, _on_security_alert)
    BUS.subscribe(TOPIC_SECURITY_OK, _on_security_ok)
    BUS.subscribe(TOPIC_SECURITY_BLOCK, _on_security_block)

    # –º–µ–¥—ñ–∞—Ç–æ—Ä —è–∫ —Å–ª—É—Ö–∞—á INPUT (—â–æ–± –º–∏ –ª–∏—à–µ –ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ –ø–æ–¥—ñ—ó)
    BUS.subscribe("input", MEDIATOR.handle_inbound)

    threading.Thread(target=idle_ping_loop, daemon=True).start()

    _kernel = Kernel()  # –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ _kernel.start()

    # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –æ–¥–∏–Ω —Ä–∞–∑ (–±–µ–∑ –¥—É–±–ª—è)
    try:
        import builtins
        if not getattr(builtins, "_LASTIVKA_START_GREETING_DONE", False) and not NO_TTS:
            say_safe(f"–Ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. Lastivka v1.4. –Ø –∑ —Ç–æ–±–æ—é, {CFG.name}.")
            builtins._LASTIVKA_START_GREETING_DONE = True
    except Exception:
        pass

    while True:
        try:
            user_input = get_user_input()
            if not (user_input or "").strip():
                continue

            logging.debug(f"[INPUT] –û—Ç—Ä–∏–º–∞–Ω–æ –≤–≤—ñ–¥: {user_input}")
            echo("üë®‚Äçüíª –¢–∏:", user_input)
            with USER_LOG.open("a", encoding="utf-8") as f:
                f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} :: {user_input}\n")

            if handle_special_commands(user_input):
                continue

            trg = check_triggers(user_input)
            if trg:
                emotion = emotion_engine.detect_emotion(user_input)
                styled_text, tone, speed, pause = react_by_style(
                    trg.get("text_to_say", ""), emotion=emotion.get("emotion"), style=get_active_style()
                )
                echo("‚ö° –¢—Ä–∏–≥–µ—Ä:", styled_text)
                say_safe(styled_text)
                continue

            sm_save = smart_save_interceptor(user_input, None)
            if sm_save:
                echo("üß† –ü–∞–º'—è—Ç—å:", sm_save); say_safe(sm_save); continue

            sm_q = smart_query_interceptor(user_input, None)
            if sm_q:
                echo("üß† –ü–∞–º'—è—Ç—å:", sm_q); say_safe(sm_q); continue

            resp = handle_memory_commands(user_input)
            if resp:
                txt = resp.get("text_to_say") if isinstance(resp, dict) else str(resp)
                echo("üß† –ü–∞–º'—è—Ç—å:", txt); say_safe(txt); continue

            nat = handle_natural_memory_query(user_input)
            if nat is not None:
                echo("üß† –ü–∞–º'—è—Ç—å:", nat); say_safe(nat); continue

            style_change = handle_style_change(user_input)
            if style_change is not None:
                echo("üé® –°—Ç–∏–ª—å:", style_change); say_safe(style_change); continue

            # ===== –í–ê–ñ–õ–ò–í–û =====
            # –ñ–æ–¥–Ω–∏—Ö –ø—Ä—è–º–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ guard.handle_command —Ç—É—Ç!
            # –í–µ—Å—å security-–≤–µ—Ä–¥–∏–∫—Ç —Ä–æ–±–∏—Ç—å Mediator (—è–∫–∏–π –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ guard),
            # –º–∏ –ª–∏—à–µ –ø—É–±–ª—ñ–∫—É—î–º–æ –ø–æ–¥—ñ—é —É —à–∏–Ω—É:
            BUS.publish("input", {"source": "–û–ª–µ–≥", "text": user_input})

        except KeyboardInterrupt:
            logging.info("[EXIT] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
            print("[EXIT] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏‚Ä¶")
            say_safe("–Ø –∑–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É. –ü–æ–±–∞—á–∏–º–æ—Å—å –∑–Ω–æ–≤—É, –û–ª–µ–∂–µ.")
            break
        except Exception as e:
            logging.exception("üí• –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: %s", e)
            say_safe("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥, –±—É–¥—å –ª–∞—Å–∫–∞.")

# -------------------- ENTRYPOINT --------------------
def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ guard-–ª–æ–≥–µ—Ä–∏ —Ä–∞–Ω—ñ—à–µ, –Ω—ñ–∂ –ø—ñ–¥—É—Ç—å –ø–µ—Ä—à—ñ –ø–æ–¥—ñ—ó
    try:
        import security.guard as guard
        guard.init_logging(log_dir=str(LOG_DIR))
        if hasattr(guard, "health_ping"):
            guard.health_ping()
        else:
            # fallback-–ø—ñ–Ω–≥ –Ω–∞–ø—Ä—è–º—É —É –ª–æ–≥, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–º–∞
            logging.getLogger("lastivka.security.guard").info("[GUARD] health_ping ok")
    except Exception as e:
        logging.exception("[INIT] guard init failed: %s", e)

    logging.debug("[INIT] –í–∏–∫–ª–∏–∫ main_loop()...")
    main_loop()


if __name__ == "__main__":
    try:
        logging.getLogger(__name__).debug("[INIT] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∫—Ä–∏–ø—Ç–∞ (entrypoint)...")
        main()
    except Exception as e:
        logging.exception("Fatal error in lastivka: %s", e)
